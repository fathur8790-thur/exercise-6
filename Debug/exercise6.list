
exercise6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d60  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08003e70  08003e70  00004e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f40  08003f40  00005064  2**0
                  CONTENTS
  4 .ARM          00000000  08003f40  08003f40  00005064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f40  08003f40  00005064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f40  08003f40  00004f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f44  08003f44  00004f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08003f48  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b4c  20000064  08003fac  00005064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001bb0  08003fac  00005bb0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d691  00000000  00000000  0000508d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023f7  00000000  00000000  0001271e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  00014b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000087c  00000000  00000000  00015658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002321  00000000  00000000  00015ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d03d  00000000  00000000  000181f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088f81  00000000  00000000  00025232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ae1b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fb0  00000000  00000000  000ae1f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000b11a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	08003e58 	.word	0x08003e58

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	08003e58 	.word	0x08003e58

08000150 <AccessSharedResource>:
  .priority = (osPriority_t) osPriorityAboveNormal,
};
/* USER CODE BEGIN PV */
volatile int StartFlag = 1;

void AccessSharedResource() {
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
    portENTER_CRITICAL(); // Menangguhkan scheduler, mencegah kontensi dari task lain
 8000154:	f003 faba 	bl	80036cc <vPortEnterCritical>

    if (StartFlag == 1) {
 8000158:	4b0f      	ldr	r3, [pc, #60]	@ (8000198 <AccessSharedResource+0x48>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d103      	bne.n	8000168 <AccessSharedResource+0x18>
        StartFlag = 0;                      // Tandai sumber daya sedang diakses
 8000160:	4b0d      	ldr	r3, [pc, #52]	@ (8000198 <AccessSharedResource+0x48>)
 8000162:	2200      	movs	r2, #0
 8000164:	601a      	str	r2, [r3, #0]
 8000166:	e005      	b.n	8000174 <AccessSharedResource+0x24>
    } else {
        HAL_GPIO_WritePin(LED_Indicator_GPIO_Port, LED_Indicator_Pin, GPIO_PIN_SET); // LED Biru ON, menandakan kontensi
 8000168:	2201      	movs	r2, #1
 800016a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800016e:	480b      	ldr	r0, [pc, #44]	@ (800019c <AccessSharedResource+0x4c>)
 8000170:	f000 fc5c 	bl	8000a2c <HAL_GPIO_WritePin>
    }

    osDelay(500);  // Simulasi akses sumber daya
 8000174:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000178:	f001 f95e 	bl	8001438 <osDelay>

    StartFlag = 1;  // Tandai sumber daya tidak lagi diakses
 800017c:	4b06      	ldr	r3, [pc, #24]	@ (8000198 <AccessSharedResource+0x48>)
 800017e:	2201      	movs	r2, #1
 8000180:	601a      	str	r2, [r3, #0]
    HAL_GPIO_WritePin(LED_Indicator_GPIO_Port, LED_Indicator_Pin, GPIO_PIN_RESET); // LED Biru OFF
 8000182:	2200      	movs	r2, #0
 8000184:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000188:	4804      	ldr	r0, [pc, #16]	@ (800019c <AccessSharedResource+0x4c>)
 800018a:	f000 fc4f 	bl	8000a2c <HAL_GPIO_WritePin>

    portEXIT_CRITICAL(); // Mengaktifkan kembali scheduler
 800018e:	f003 facd 	bl	800372c <vPortExitCritical>
}
 8000192:	bf00      	nop
 8000194:	bd80      	pop	{r7, pc}
 8000196:	bf00      	nop
 8000198:	20000000 	.word	0x20000000
 800019c:	40010800 	.word	0x40010800

080001a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001a4:	f000 f978 	bl	8000498 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001a8:	f000 f832 	bl	8000210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ac:	f000 f86c 	bl	8000288 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001b0:	f001 f832 	bl	8001218 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001b4:	4a0d      	ldr	r2, [pc, #52]	@ (80001ec <main+0x4c>)
 80001b6:	2100      	movs	r1, #0
 80001b8:	480d      	ldr	r0, [pc, #52]	@ (80001f0 <main+0x50>)
 80001ba:	f001 f893 	bl	80012e4 <osThreadNew>
 80001be:	4603      	mov	r3, r0
 80001c0:	4a0c      	ldr	r2, [pc, #48]	@ (80001f4 <main+0x54>)
 80001c2:	6013      	str	r3, [r2, #0]

  /* creation of FlashGreenLed */
  FlashGreenLedHandle = osThreadNew(FlashGreenLedTask, NULL, &FlashGreenLed_attributes);
 80001c4:	4a0c      	ldr	r2, [pc, #48]	@ (80001f8 <main+0x58>)
 80001c6:	2100      	movs	r1, #0
 80001c8:	480c      	ldr	r0, [pc, #48]	@ (80001fc <main+0x5c>)
 80001ca:	f001 f88b 	bl	80012e4 <osThreadNew>
 80001ce:	4603      	mov	r3, r0
 80001d0:	4a0b      	ldr	r2, [pc, #44]	@ (8000200 <main+0x60>)
 80001d2:	6013      	str	r3, [r2, #0]

  /* creation of FlashRedLed */
  FlashRedLedHandle = osThreadNew(FlashRedLedTask, NULL, &FlashRedLed_attributes);
 80001d4:	4a0b      	ldr	r2, [pc, #44]	@ (8000204 <main+0x64>)
 80001d6:	2100      	movs	r1, #0
 80001d8:	480b      	ldr	r0, [pc, #44]	@ (8000208 <main+0x68>)
 80001da:	f001 f883 	bl	80012e4 <osThreadNew>
 80001de:	4603      	mov	r3, r0
 80001e0:	4a0a      	ldr	r2, [pc, #40]	@ (800020c <main+0x6c>)
 80001e2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001e4:	f001 f84a 	bl	800127c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e8:	bf00      	nop
 80001ea:	e7fd      	b.n	80001e8 <main+0x48>
 80001ec:	08003eb0 	.word	0x08003eb0
 80001f0:	080002f1 	.word	0x080002f1
 80001f4:	20000080 	.word	0x20000080
 80001f8:	08003ed4 	.word	0x08003ed4
 80001fc:	08000301 	.word	0x08000301
 8000200:	20000084 	.word	0x20000084
 8000204:	08003ef8 	.word	0x08003ef8
 8000208:	0800033d 	.word	0x0800033d
 800020c:	20000088 	.word	0x20000088

08000210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b090      	sub	sp, #64	@ 0x40
 8000214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000216:	f107 0318 	add.w	r3, r7, #24
 800021a:	2228      	movs	r2, #40	@ 0x28
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f003 fd34 	bl	8003c8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	60da      	str	r2, [r3, #12]
 8000230:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000232:	2302      	movs	r3, #2
 8000234:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000236:	2301      	movs	r3, #1
 8000238:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800023a:	2310      	movs	r3, #16
 800023c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800023e:	2300      	movs	r3, #0
 8000240:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000242:	f107 0318 	add.w	r3, r7, #24
 8000246:	4618      	mov	r0, r3
 8000248:	f000 fc08 	bl	8000a5c <HAL_RCC_OscConfig>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000252:	f000 f88f 	bl	8000374 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000256:	230f      	movs	r3, #15
 8000258:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800025a:	2300      	movs	r3, #0
 800025c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	2100      	movs	r1, #0
 800026e:	4618      	mov	r0, r3
 8000270:	f000 fe76 	bl	8000f60 <HAL_RCC_ClockConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800027a:	f000 f87b 	bl	8000374 <Error_Handler>
  }
}
 800027e:	bf00      	nop
 8000280:	3740      	adds	r7, #64	@ 0x40
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
	...

08000288 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b086      	sub	sp, #24
 800028c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800028e:	f107 0308 	add.w	r3, r7, #8
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]
 8000298:	609a      	str	r2, [r3, #8]
 800029a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800029c:	4b12      	ldr	r3, [pc, #72]	@ (80002e8 <MX_GPIO_Init+0x60>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	4a11      	ldr	r2, [pc, #68]	@ (80002e8 <MX_GPIO_Init+0x60>)
 80002a2:	f043 0304 	orr.w	r3, r3, #4
 80002a6:	6193      	str	r3, [r2, #24]
 80002a8:	4b0f      	ldr	r3, [pc, #60]	@ (80002e8 <MX_GPIO_Init+0x60>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	f003 0304 	and.w	r3, r3, #4
 80002b0:	607b      	str	r3, [r7, #4]
 80002b2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Green_LED_Pin|Red_LED_Pin|LED_Indicator_Pin, GPIO_PIN_RESET);
 80002b4:	2200      	movs	r2, #0
 80002b6:	f44f 6130 	mov.w	r1, #2816	@ 0xb00
 80002ba:	480c      	ldr	r0, [pc, #48]	@ (80002ec <MX_GPIO_Init+0x64>)
 80002bc:	f000 fbb6 	bl	8000a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Green_LED_Pin Red_LED_Pin LED_Indicator_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Red_LED_Pin|LED_Indicator_Pin;
 80002c0:	f44f 6330 	mov.w	r3, #2816	@ 0xb00
 80002c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002c6:	2301      	movs	r3, #1
 80002c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ca:	2300      	movs	r3, #0
 80002cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ce:	2302      	movs	r3, #2
 80002d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002d2:	f107 0308 	add.w	r3, r7, #8
 80002d6:	4619      	mov	r1, r3
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <MX_GPIO_Init+0x64>)
 80002da:	f000 fa23 	bl	8000724 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002de:	bf00      	nop
 80002e0:	3718      	adds	r7, #24
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40021000 	.word	0x40021000
 80002ec:	40010800 	.word	0x40010800

080002f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80002f8:	2001      	movs	r0, #1
 80002fa:	f001 f89d 	bl	8001438 <osDelay>
 80002fe:	e7fb      	b.n	80002f8 <StartDefaultTask+0x8>

08000300 <FlashGreenLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FlashGreenLedTask */
void FlashGreenLedTask(void *argument)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FlashGreenLedTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_SET); // Turn Blue LED on
 8000308:	2201      	movs	r2, #1
 800030a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800030e:	480a      	ldr	r0, [pc, #40]	@ (8000338 <FlashGreenLedTask+0x38>)
 8000310:	f000 fb8c 	bl	8000a2c <HAL_GPIO_WritePin>
	  AccessSharedResource();
 8000314:	f7ff ff1c 	bl	8000150 <AccessSharedResource>
	  osDelay(500);
 8000318:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800031c:	f001 f88c 	bl	8001438 <osDelay>
	  HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_RESET);
 8000320:	2200      	movs	r2, #0
 8000322:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000326:	4804      	ldr	r0, [pc, #16]	@ (8000338 <FlashGreenLedTask+0x38>)
 8000328:	f000 fb80 	bl	8000a2c <HAL_GPIO_WritePin>
	  osDelay(500); // Suspend for 0.5 seconds
 800032c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000330:	f001 f882 	bl	8001438 <osDelay>
	  HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_SET); // Turn Blue LED on
 8000334:	bf00      	nop
 8000336:	e7e7      	b.n	8000308 <FlashGreenLedTask+0x8>
 8000338:	40010800 	.word	0x40010800

0800033c <FlashRedLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FlashRedLedTask */
void FlashRedLedTask(void *argument)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FlashRedLedTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(Red_LED_GPIO_Port,Red_LED_Pin, GPIO_PIN_SET); // Turn Blue LED on
 8000344:	2201      	movs	r2, #1
 8000346:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800034a:	4809      	ldr	r0, [pc, #36]	@ (8000370 <FlashRedLedTask+0x34>)
 800034c:	f000 fb6e 	bl	8000a2c <HAL_GPIO_WritePin>
	  AccessSharedResource();
 8000350:	f7ff fefe 	bl	8000150 <AccessSharedResource>
	  osDelay(100);
 8000354:	2064      	movs	r0, #100	@ 0x64
 8000356:	f001 f86f 	bl	8001438 <osDelay>
	  HAL_GPIO_WritePin(Red_LED_GPIO_Port,Red_LED_Pin, GPIO_PIN_RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000360:	4803      	ldr	r0, [pc, #12]	@ (8000370 <FlashRedLedTask+0x34>)
 8000362:	f000 fb63 	bl	8000a2c <HAL_GPIO_WritePin>
	  osDelay(100);
 8000366:	2064      	movs	r0, #100	@ 0x64
 8000368:	f001 f866 	bl	8001438 <osDelay>
	  HAL_GPIO_WritePin(Red_LED_GPIO_Port,Red_LED_Pin, GPIO_PIN_SET); // Turn Blue LED on
 800036c:	bf00      	nop
 800036e:	e7e9      	b.n	8000344 <FlashRedLedTask+0x8>
 8000370:	40010800 	.word	0x40010800

08000374 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000378:	b672      	cpsid	i
}
 800037a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800037c:	bf00      	nop
 800037e:	e7fd      	b.n	800037c <Error_Handler+0x8>

08000380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000386:	4b18      	ldr	r3, [pc, #96]	@ (80003e8 <HAL_MspInit+0x68>)
 8000388:	699b      	ldr	r3, [r3, #24]
 800038a:	4a17      	ldr	r2, [pc, #92]	@ (80003e8 <HAL_MspInit+0x68>)
 800038c:	f043 0301 	orr.w	r3, r3, #1
 8000390:	6193      	str	r3, [r2, #24]
 8000392:	4b15      	ldr	r3, [pc, #84]	@ (80003e8 <HAL_MspInit+0x68>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	f003 0301 	and.w	r3, r3, #1
 800039a:	60bb      	str	r3, [r7, #8]
 800039c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800039e:	4b12      	ldr	r3, [pc, #72]	@ (80003e8 <HAL_MspInit+0x68>)
 80003a0:	69db      	ldr	r3, [r3, #28]
 80003a2:	4a11      	ldr	r2, [pc, #68]	@ (80003e8 <HAL_MspInit+0x68>)
 80003a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003a8:	61d3      	str	r3, [r2, #28]
 80003aa:	4b0f      	ldr	r3, [pc, #60]	@ (80003e8 <HAL_MspInit+0x68>)
 80003ac:	69db      	ldr	r3, [r3, #28]
 80003ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003b2:	607b      	str	r3, [r7, #4]
 80003b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80003b6:	2200      	movs	r2, #0
 80003b8:	210f      	movs	r1, #15
 80003ba:	f06f 0001 	mvn.w	r0, #1
 80003be:	f000 f988 	bl	80006d2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003c2:	4b0a      	ldr	r3, [pc, #40]	@ (80003ec <HAL_MspInit+0x6c>)
 80003c4:	685b      	ldr	r3, [r3, #4]
 80003c6:	60fb      	str	r3, [r7, #12]
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003ce:	60fb      	str	r3, [r7, #12]
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	4a04      	ldr	r2, [pc, #16]	@ (80003ec <HAL_MspInit+0x6c>)
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003de:	bf00      	nop
 80003e0:	3710      	adds	r7, #16
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	40021000 	.word	0x40021000
 80003ec:	40010000 	.word	0x40010000

080003f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003f4:	bf00      	nop
 80003f6:	e7fd      	b.n	80003f4 <NMI_Handler+0x4>

080003f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003fc:	bf00      	nop
 80003fe:	e7fd      	b.n	80003fc <HardFault_Handler+0x4>

08000400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000404:	bf00      	nop
 8000406:	e7fd      	b.n	8000404 <MemManage_Handler+0x4>

08000408 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800040c:	bf00      	nop
 800040e:	e7fd      	b.n	800040c <BusFault_Handler+0x4>

08000410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000414:	bf00      	nop
 8000416:	e7fd      	b.n	8000414 <UsageFault_Handler+0x4>

08000418 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800041c:	bf00      	nop
 800041e:	46bd      	mov	sp, r7
 8000420:	bc80      	pop	{r7}
 8000422:	4770      	bx	lr

08000424 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000428:	f000 f87c 	bl	8000524 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800042c:	f002 fc5e 	bl	8002cec <xTaskGetSchedulerState>
 8000430:	4603      	mov	r3, r0
 8000432:	2b01      	cmp	r3, #1
 8000434:	d001      	beq.n	800043a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000436:	f003 f9c7 	bl	80037c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800043a:	bf00      	nop
 800043c:	bd80      	pop	{r7, pc}

0800043e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800043e:	b480      	push	{r7}
 8000440:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000442:	bf00      	nop
 8000444:	46bd      	mov	sp, r7
 8000446:	bc80      	pop	{r7}
 8000448:	4770      	bx	lr
	...

0800044c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800044c:	f7ff fff7 	bl	800043e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000450:	480b      	ldr	r0, [pc, #44]	@ (8000480 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000452:	490c      	ldr	r1, [pc, #48]	@ (8000484 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000454:	4a0c      	ldr	r2, [pc, #48]	@ (8000488 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000458:	e002      	b.n	8000460 <LoopCopyDataInit>

0800045a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800045a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800045c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800045e:	3304      	adds	r3, #4

08000460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000464:	d3f9      	bcc.n	800045a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000466:	4a09      	ldr	r2, [pc, #36]	@ (800048c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000468:	4c09      	ldr	r4, [pc, #36]	@ (8000490 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800046a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800046c:	e001      	b.n	8000472 <LoopFillZerobss>

0800046e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800046e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000470:	3204      	adds	r2, #4

08000472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000474:	d3fb      	bcc.n	800046e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000476:	f003 fc67 	bl	8003d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800047a:	f7ff fe91 	bl	80001a0 <main>
  bx lr
 800047e:	4770      	bx	lr
  ldr r0, =_sdata
 8000480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000484:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000488:	08003f48 	.word	0x08003f48
  ldr r2, =_sbss
 800048c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000490:	20001bb0 	.word	0x20001bb0

08000494 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000494:	e7fe      	b.n	8000494 <ADC1_2_IRQHandler>
	...

08000498 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800049c:	4b08      	ldr	r3, [pc, #32]	@ (80004c0 <HAL_Init+0x28>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a07      	ldr	r2, [pc, #28]	@ (80004c0 <HAL_Init+0x28>)
 80004a2:	f043 0310 	orr.w	r3, r3, #16
 80004a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004a8:	2003      	movs	r0, #3
 80004aa:	f000 f907 	bl	80006bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004ae:	200f      	movs	r0, #15
 80004b0:	f000 f808 	bl	80004c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004b4:	f7ff ff64 	bl	8000380 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004b8:	2300      	movs	r3, #0
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	40022000 	.word	0x40022000

080004c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004cc:	4b12      	ldr	r3, [pc, #72]	@ (8000518 <HAL_InitTick+0x54>)
 80004ce:	681a      	ldr	r2, [r3, #0]
 80004d0:	4b12      	ldr	r3, [pc, #72]	@ (800051c <HAL_InitTick+0x58>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	4619      	mov	r1, r3
 80004d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004da:	fbb3 f3f1 	udiv	r3, r3, r1
 80004de:	fbb2 f3f3 	udiv	r3, r2, r3
 80004e2:	4618      	mov	r0, r3
 80004e4:	f000 f911 	bl	800070a <HAL_SYSTICK_Config>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004ee:	2301      	movs	r3, #1
 80004f0:	e00e      	b.n	8000510 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	2b0f      	cmp	r3, #15
 80004f6:	d80a      	bhi.n	800050e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004f8:	2200      	movs	r2, #0
 80004fa:	6879      	ldr	r1, [r7, #4]
 80004fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000500:	f000 f8e7 	bl	80006d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000504:	4a06      	ldr	r2, [pc, #24]	@ (8000520 <HAL_InitTick+0x5c>)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800050a:	2300      	movs	r3, #0
 800050c:	e000      	b.n	8000510 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800050e:	2301      	movs	r3, #1
}
 8000510:	4618      	mov	r0, r3
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	20000004 	.word	0x20000004
 800051c:	2000000c 	.word	0x2000000c
 8000520:	20000008 	.word	0x20000008

08000524 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000528:	4b05      	ldr	r3, [pc, #20]	@ (8000540 <HAL_IncTick+0x1c>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	461a      	mov	r2, r3
 800052e:	4b05      	ldr	r3, [pc, #20]	@ (8000544 <HAL_IncTick+0x20>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4413      	add	r3, r2
 8000534:	4a03      	ldr	r2, [pc, #12]	@ (8000544 <HAL_IncTick+0x20>)
 8000536:	6013      	str	r3, [r2, #0]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr
 8000540:	2000000c 	.word	0x2000000c
 8000544:	2000008c 	.word	0x2000008c

08000548 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  return uwTick;
 800054c:	4b02      	ldr	r3, [pc, #8]	@ (8000558 <HAL_GetTick+0x10>)
 800054e:	681b      	ldr	r3, [r3, #0]
}
 8000550:	4618      	mov	r0, r3
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr
 8000558:	2000008c 	.word	0x2000008c

0800055c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	f003 0307 	and.w	r3, r3, #7
 800056a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800056c:	4b0c      	ldr	r3, [pc, #48]	@ (80005a0 <__NVIC_SetPriorityGrouping+0x44>)
 800056e:	68db      	ldr	r3, [r3, #12]
 8000570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000572:	68ba      	ldr	r2, [r7, #8]
 8000574:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000578:	4013      	ands	r3, r2
 800057a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000584:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000588:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800058c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800058e:	4a04      	ldr	r2, [pc, #16]	@ (80005a0 <__NVIC_SetPriorityGrouping+0x44>)
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	60d3      	str	r3, [r2, #12]
}
 8000594:	bf00      	nop
 8000596:	3714      	adds	r7, #20
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	e000ed00 	.word	0xe000ed00

080005a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005a8:	4b04      	ldr	r3, [pc, #16]	@ (80005bc <__NVIC_GetPriorityGrouping+0x18>)
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	0a1b      	lsrs	r3, r3, #8
 80005ae:	f003 0307 	and.w	r3, r3, #7
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	e000ed00 	.word	0xe000ed00

080005c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	6039      	str	r1, [r7, #0]
 80005ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	db0a      	blt.n	80005ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	490c      	ldr	r1, [pc, #48]	@ (800060c <__NVIC_SetPriority+0x4c>)
 80005da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005de:	0112      	lsls	r2, r2, #4
 80005e0:	b2d2      	uxtb	r2, r2
 80005e2:	440b      	add	r3, r1
 80005e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005e8:	e00a      	b.n	8000600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	b2da      	uxtb	r2, r3
 80005ee:	4908      	ldr	r1, [pc, #32]	@ (8000610 <__NVIC_SetPriority+0x50>)
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	f003 030f 	and.w	r3, r3, #15
 80005f6:	3b04      	subs	r3, #4
 80005f8:	0112      	lsls	r2, r2, #4
 80005fa:	b2d2      	uxtb	r2, r2
 80005fc:	440b      	add	r3, r1
 80005fe:	761a      	strb	r2, [r3, #24]
}
 8000600:	bf00      	nop
 8000602:	370c      	adds	r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	bc80      	pop	{r7}
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	e000e100 	.word	0xe000e100
 8000610:	e000ed00 	.word	0xe000ed00

08000614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000614:	b480      	push	{r7}
 8000616:	b089      	sub	sp, #36	@ 0x24
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	f003 0307 	and.w	r3, r3, #7
 8000626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000628:	69fb      	ldr	r3, [r7, #28]
 800062a:	f1c3 0307 	rsb	r3, r3, #7
 800062e:	2b04      	cmp	r3, #4
 8000630:	bf28      	it	cs
 8000632:	2304      	movcs	r3, #4
 8000634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000636:	69fb      	ldr	r3, [r7, #28]
 8000638:	3304      	adds	r3, #4
 800063a:	2b06      	cmp	r3, #6
 800063c:	d902      	bls.n	8000644 <NVIC_EncodePriority+0x30>
 800063e:	69fb      	ldr	r3, [r7, #28]
 8000640:	3b03      	subs	r3, #3
 8000642:	e000      	b.n	8000646 <NVIC_EncodePriority+0x32>
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000648:	f04f 32ff 	mov.w	r2, #4294967295
 800064c:	69bb      	ldr	r3, [r7, #24]
 800064e:	fa02 f303 	lsl.w	r3, r2, r3
 8000652:	43da      	mvns	r2, r3
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	401a      	ands	r2, r3
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800065c:	f04f 31ff 	mov.w	r1, #4294967295
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	fa01 f303 	lsl.w	r3, r1, r3
 8000666:	43d9      	mvns	r1, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800066c:	4313      	orrs	r3, r2
         );
}
 800066e:	4618      	mov	r0, r3
 8000670:	3724      	adds	r7, #36	@ 0x24
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr

08000678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	3b01      	subs	r3, #1
 8000684:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000688:	d301      	bcc.n	800068e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800068a:	2301      	movs	r3, #1
 800068c:	e00f      	b.n	80006ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800068e:	4a0a      	ldr	r2, [pc, #40]	@ (80006b8 <SysTick_Config+0x40>)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	3b01      	subs	r3, #1
 8000694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000696:	210f      	movs	r1, #15
 8000698:	f04f 30ff 	mov.w	r0, #4294967295
 800069c:	f7ff ff90 	bl	80005c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006a0:	4b05      	ldr	r3, [pc, #20]	@ (80006b8 <SysTick_Config+0x40>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006a6:	4b04      	ldr	r3, [pc, #16]	@ (80006b8 <SysTick_Config+0x40>)
 80006a8:	2207      	movs	r2, #7
 80006aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006ac:	2300      	movs	r3, #0
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	e000e010 	.word	0xe000e010

080006bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f7ff ff49 	bl	800055c <__NVIC_SetPriorityGrouping>
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b086      	sub	sp, #24
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	4603      	mov	r3, r0
 80006da:	60b9      	str	r1, [r7, #8]
 80006dc:	607a      	str	r2, [r7, #4]
 80006de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006e4:	f7ff ff5e 	bl	80005a4 <__NVIC_GetPriorityGrouping>
 80006e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	68b9      	ldr	r1, [r7, #8]
 80006ee:	6978      	ldr	r0, [r7, #20]
 80006f0:	f7ff ff90 	bl	8000614 <NVIC_EncodePriority>
 80006f4:	4602      	mov	r2, r0
 80006f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006fa:	4611      	mov	r1, r2
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ff5f 	bl	80005c0 <__NVIC_SetPriority>
}
 8000702:	bf00      	nop
 8000704:	3718      	adds	r7, #24
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	b082      	sub	sp, #8
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f7ff ffb0 	bl	8000678 <SysTick_Config>
 8000718:	4603      	mov	r3, r0
}
 800071a:	4618      	mov	r0, r3
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000724:	b480      	push	{r7}
 8000726:	b08b      	sub	sp, #44	@ 0x2c
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800072e:	2300      	movs	r3, #0
 8000730:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000732:	2300      	movs	r3, #0
 8000734:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000736:	e169      	b.n	8000a0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000738:	2201      	movs	r2, #1
 800073a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800073c:	fa02 f303 	lsl.w	r3, r2, r3
 8000740:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	69fa      	ldr	r2, [r7, #28]
 8000748:	4013      	ands	r3, r2
 800074a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800074c:	69ba      	ldr	r2, [r7, #24]
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	429a      	cmp	r2, r3
 8000752:	f040 8158 	bne.w	8000a06 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	4a9a      	ldr	r2, [pc, #616]	@ (80009c4 <HAL_GPIO_Init+0x2a0>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d05e      	beq.n	800081e <HAL_GPIO_Init+0xfa>
 8000760:	4a98      	ldr	r2, [pc, #608]	@ (80009c4 <HAL_GPIO_Init+0x2a0>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d875      	bhi.n	8000852 <HAL_GPIO_Init+0x12e>
 8000766:	4a98      	ldr	r2, [pc, #608]	@ (80009c8 <HAL_GPIO_Init+0x2a4>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d058      	beq.n	800081e <HAL_GPIO_Init+0xfa>
 800076c:	4a96      	ldr	r2, [pc, #600]	@ (80009c8 <HAL_GPIO_Init+0x2a4>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d86f      	bhi.n	8000852 <HAL_GPIO_Init+0x12e>
 8000772:	4a96      	ldr	r2, [pc, #600]	@ (80009cc <HAL_GPIO_Init+0x2a8>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d052      	beq.n	800081e <HAL_GPIO_Init+0xfa>
 8000778:	4a94      	ldr	r2, [pc, #592]	@ (80009cc <HAL_GPIO_Init+0x2a8>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d869      	bhi.n	8000852 <HAL_GPIO_Init+0x12e>
 800077e:	4a94      	ldr	r2, [pc, #592]	@ (80009d0 <HAL_GPIO_Init+0x2ac>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d04c      	beq.n	800081e <HAL_GPIO_Init+0xfa>
 8000784:	4a92      	ldr	r2, [pc, #584]	@ (80009d0 <HAL_GPIO_Init+0x2ac>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d863      	bhi.n	8000852 <HAL_GPIO_Init+0x12e>
 800078a:	4a92      	ldr	r2, [pc, #584]	@ (80009d4 <HAL_GPIO_Init+0x2b0>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d046      	beq.n	800081e <HAL_GPIO_Init+0xfa>
 8000790:	4a90      	ldr	r2, [pc, #576]	@ (80009d4 <HAL_GPIO_Init+0x2b0>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d85d      	bhi.n	8000852 <HAL_GPIO_Init+0x12e>
 8000796:	2b12      	cmp	r3, #18
 8000798:	d82a      	bhi.n	80007f0 <HAL_GPIO_Init+0xcc>
 800079a:	2b12      	cmp	r3, #18
 800079c:	d859      	bhi.n	8000852 <HAL_GPIO_Init+0x12e>
 800079e:	a201      	add	r2, pc, #4	@ (adr r2, 80007a4 <HAL_GPIO_Init+0x80>)
 80007a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a4:	0800081f 	.word	0x0800081f
 80007a8:	080007f9 	.word	0x080007f9
 80007ac:	0800080b 	.word	0x0800080b
 80007b0:	0800084d 	.word	0x0800084d
 80007b4:	08000853 	.word	0x08000853
 80007b8:	08000853 	.word	0x08000853
 80007bc:	08000853 	.word	0x08000853
 80007c0:	08000853 	.word	0x08000853
 80007c4:	08000853 	.word	0x08000853
 80007c8:	08000853 	.word	0x08000853
 80007cc:	08000853 	.word	0x08000853
 80007d0:	08000853 	.word	0x08000853
 80007d4:	08000853 	.word	0x08000853
 80007d8:	08000853 	.word	0x08000853
 80007dc:	08000853 	.word	0x08000853
 80007e0:	08000853 	.word	0x08000853
 80007e4:	08000853 	.word	0x08000853
 80007e8:	08000801 	.word	0x08000801
 80007ec:	08000815 	.word	0x08000815
 80007f0:	4a79      	ldr	r2, [pc, #484]	@ (80009d8 <HAL_GPIO_Init+0x2b4>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d013      	beq.n	800081e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80007f6:	e02c      	b.n	8000852 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	623b      	str	r3, [r7, #32]
          break;
 80007fe:	e029      	b.n	8000854 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	3304      	adds	r3, #4
 8000806:	623b      	str	r3, [r7, #32]
          break;
 8000808:	e024      	b.n	8000854 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	68db      	ldr	r3, [r3, #12]
 800080e:	3308      	adds	r3, #8
 8000810:	623b      	str	r3, [r7, #32]
          break;
 8000812:	e01f      	b.n	8000854 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	68db      	ldr	r3, [r3, #12]
 8000818:	330c      	adds	r3, #12
 800081a:	623b      	str	r3, [r7, #32]
          break;
 800081c:	e01a      	b.n	8000854 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	689b      	ldr	r3, [r3, #8]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d102      	bne.n	800082c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000826:	2304      	movs	r3, #4
 8000828:	623b      	str	r3, [r7, #32]
          break;
 800082a:	e013      	b.n	8000854 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	689b      	ldr	r3, [r3, #8]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d105      	bne.n	8000840 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000834:	2308      	movs	r3, #8
 8000836:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	69fa      	ldr	r2, [r7, #28]
 800083c:	611a      	str	r2, [r3, #16]
          break;
 800083e:	e009      	b.n	8000854 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000840:	2308      	movs	r3, #8
 8000842:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	69fa      	ldr	r2, [r7, #28]
 8000848:	615a      	str	r2, [r3, #20]
          break;
 800084a:	e003      	b.n	8000854 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800084c:	2300      	movs	r3, #0
 800084e:	623b      	str	r3, [r7, #32]
          break;
 8000850:	e000      	b.n	8000854 <HAL_GPIO_Init+0x130>
          break;
 8000852:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000854:	69bb      	ldr	r3, [r7, #24]
 8000856:	2bff      	cmp	r3, #255	@ 0xff
 8000858:	d801      	bhi.n	800085e <HAL_GPIO_Init+0x13a>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	e001      	b.n	8000862 <HAL_GPIO_Init+0x13e>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	3304      	adds	r3, #4
 8000862:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000864:	69bb      	ldr	r3, [r7, #24]
 8000866:	2bff      	cmp	r3, #255	@ 0xff
 8000868:	d802      	bhi.n	8000870 <HAL_GPIO_Init+0x14c>
 800086a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	e002      	b.n	8000876 <HAL_GPIO_Init+0x152>
 8000870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000872:	3b08      	subs	r3, #8
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	210f      	movs	r1, #15
 800087e:	693b      	ldr	r3, [r7, #16]
 8000880:	fa01 f303 	lsl.w	r3, r1, r3
 8000884:	43db      	mvns	r3, r3
 8000886:	401a      	ands	r2, r3
 8000888:	6a39      	ldr	r1, [r7, #32]
 800088a:	693b      	ldr	r3, [r7, #16]
 800088c:	fa01 f303 	lsl.w	r3, r1, r3
 8000890:	431a      	orrs	r2, r3
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800089e:	2b00      	cmp	r3, #0
 80008a0:	f000 80b1 	beq.w	8000a06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80008a4:	4b4d      	ldr	r3, [pc, #308]	@ (80009dc <HAL_GPIO_Init+0x2b8>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	4a4c      	ldr	r2, [pc, #304]	@ (80009dc <HAL_GPIO_Init+0x2b8>)
 80008aa:	f043 0301 	orr.w	r3, r3, #1
 80008ae:	6193      	str	r3, [r2, #24]
 80008b0:	4b4a      	ldr	r3, [pc, #296]	@ (80009dc <HAL_GPIO_Init+0x2b8>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	f003 0301 	and.w	r3, r3, #1
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80008bc:	4a48      	ldr	r2, [pc, #288]	@ (80009e0 <HAL_GPIO_Init+0x2bc>)
 80008be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008c0:	089b      	lsrs	r3, r3, #2
 80008c2:	3302      	adds	r3, #2
 80008c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80008ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008cc:	f003 0303 	and.w	r3, r3, #3
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	220f      	movs	r2, #15
 80008d4:	fa02 f303 	lsl.w	r3, r2, r3
 80008d8:	43db      	mvns	r3, r3
 80008da:	68fa      	ldr	r2, [r7, #12]
 80008dc:	4013      	ands	r3, r2
 80008de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4a40      	ldr	r2, [pc, #256]	@ (80009e4 <HAL_GPIO_Init+0x2c0>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d013      	beq.n	8000910 <HAL_GPIO_Init+0x1ec>
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4a3f      	ldr	r2, [pc, #252]	@ (80009e8 <HAL_GPIO_Init+0x2c4>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d00d      	beq.n	800090c <HAL_GPIO_Init+0x1e8>
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4a3e      	ldr	r2, [pc, #248]	@ (80009ec <HAL_GPIO_Init+0x2c8>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d007      	beq.n	8000908 <HAL_GPIO_Init+0x1e4>
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4a3d      	ldr	r2, [pc, #244]	@ (80009f0 <HAL_GPIO_Init+0x2cc>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d101      	bne.n	8000904 <HAL_GPIO_Init+0x1e0>
 8000900:	2303      	movs	r3, #3
 8000902:	e006      	b.n	8000912 <HAL_GPIO_Init+0x1ee>
 8000904:	2304      	movs	r3, #4
 8000906:	e004      	b.n	8000912 <HAL_GPIO_Init+0x1ee>
 8000908:	2302      	movs	r3, #2
 800090a:	e002      	b.n	8000912 <HAL_GPIO_Init+0x1ee>
 800090c:	2301      	movs	r3, #1
 800090e:	e000      	b.n	8000912 <HAL_GPIO_Init+0x1ee>
 8000910:	2300      	movs	r3, #0
 8000912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000914:	f002 0203 	and.w	r2, r2, #3
 8000918:	0092      	lsls	r2, r2, #2
 800091a:	4093      	lsls	r3, r2
 800091c:	68fa      	ldr	r2, [r7, #12]
 800091e:	4313      	orrs	r3, r2
 8000920:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000922:	492f      	ldr	r1, [pc, #188]	@ (80009e0 <HAL_GPIO_Init+0x2bc>)
 8000924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000926:	089b      	lsrs	r3, r3, #2
 8000928:	3302      	adds	r3, #2
 800092a:	68fa      	ldr	r2, [r7, #12]
 800092c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000938:	2b00      	cmp	r3, #0
 800093a:	d006      	beq.n	800094a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800093c:	4b2d      	ldr	r3, [pc, #180]	@ (80009f4 <HAL_GPIO_Init+0x2d0>)
 800093e:	689a      	ldr	r2, [r3, #8]
 8000940:	492c      	ldr	r1, [pc, #176]	@ (80009f4 <HAL_GPIO_Init+0x2d0>)
 8000942:	69bb      	ldr	r3, [r7, #24]
 8000944:	4313      	orrs	r3, r2
 8000946:	608b      	str	r3, [r1, #8]
 8000948:	e006      	b.n	8000958 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800094a:	4b2a      	ldr	r3, [pc, #168]	@ (80009f4 <HAL_GPIO_Init+0x2d0>)
 800094c:	689a      	ldr	r2, [r3, #8]
 800094e:	69bb      	ldr	r3, [r7, #24]
 8000950:	43db      	mvns	r3, r3
 8000952:	4928      	ldr	r1, [pc, #160]	@ (80009f4 <HAL_GPIO_Init+0x2d0>)
 8000954:	4013      	ands	r3, r2
 8000956:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000960:	2b00      	cmp	r3, #0
 8000962:	d006      	beq.n	8000972 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000964:	4b23      	ldr	r3, [pc, #140]	@ (80009f4 <HAL_GPIO_Init+0x2d0>)
 8000966:	68da      	ldr	r2, [r3, #12]
 8000968:	4922      	ldr	r1, [pc, #136]	@ (80009f4 <HAL_GPIO_Init+0x2d0>)
 800096a:	69bb      	ldr	r3, [r7, #24]
 800096c:	4313      	orrs	r3, r2
 800096e:	60cb      	str	r3, [r1, #12]
 8000970:	e006      	b.n	8000980 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000972:	4b20      	ldr	r3, [pc, #128]	@ (80009f4 <HAL_GPIO_Init+0x2d0>)
 8000974:	68da      	ldr	r2, [r3, #12]
 8000976:	69bb      	ldr	r3, [r7, #24]
 8000978:	43db      	mvns	r3, r3
 800097a:	491e      	ldr	r1, [pc, #120]	@ (80009f4 <HAL_GPIO_Init+0x2d0>)
 800097c:	4013      	ands	r3, r2
 800097e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000988:	2b00      	cmp	r3, #0
 800098a:	d006      	beq.n	800099a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800098c:	4b19      	ldr	r3, [pc, #100]	@ (80009f4 <HAL_GPIO_Init+0x2d0>)
 800098e:	685a      	ldr	r2, [r3, #4]
 8000990:	4918      	ldr	r1, [pc, #96]	@ (80009f4 <HAL_GPIO_Init+0x2d0>)
 8000992:	69bb      	ldr	r3, [r7, #24]
 8000994:	4313      	orrs	r3, r2
 8000996:	604b      	str	r3, [r1, #4]
 8000998:	e006      	b.n	80009a8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800099a:	4b16      	ldr	r3, [pc, #88]	@ (80009f4 <HAL_GPIO_Init+0x2d0>)
 800099c:	685a      	ldr	r2, [r3, #4]
 800099e:	69bb      	ldr	r3, [r7, #24]
 80009a0:	43db      	mvns	r3, r3
 80009a2:	4914      	ldr	r1, [pc, #80]	@ (80009f4 <HAL_GPIO_Init+0x2d0>)
 80009a4:	4013      	ands	r3, r2
 80009a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d021      	beq.n	80009f8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80009b4:	4b0f      	ldr	r3, [pc, #60]	@ (80009f4 <HAL_GPIO_Init+0x2d0>)
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	490e      	ldr	r1, [pc, #56]	@ (80009f4 <HAL_GPIO_Init+0x2d0>)
 80009ba:	69bb      	ldr	r3, [r7, #24]
 80009bc:	4313      	orrs	r3, r2
 80009be:	600b      	str	r3, [r1, #0]
 80009c0:	e021      	b.n	8000a06 <HAL_GPIO_Init+0x2e2>
 80009c2:	bf00      	nop
 80009c4:	10320000 	.word	0x10320000
 80009c8:	10310000 	.word	0x10310000
 80009cc:	10220000 	.word	0x10220000
 80009d0:	10210000 	.word	0x10210000
 80009d4:	10120000 	.word	0x10120000
 80009d8:	10110000 	.word	0x10110000
 80009dc:	40021000 	.word	0x40021000
 80009e0:	40010000 	.word	0x40010000
 80009e4:	40010800 	.word	0x40010800
 80009e8:	40010c00 	.word	0x40010c00
 80009ec:	40011000 	.word	0x40011000
 80009f0:	40011400 	.word	0x40011400
 80009f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80009f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000a28 <HAL_GPIO_Init+0x304>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	69bb      	ldr	r3, [r7, #24]
 80009fe:	43db      	mvns	r3, r3
 8000a00:	4909      	ldr	r1, [pc, #36]	@ (8000a28 <HAL_GPIO_Init+0x304>)
 8000a02:	4013      	ands	r3, r2
 8000a04:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a08:	3301      	adds	r3, #1
 8000a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a12:	fa22 f303 	lsr.w	r3, r2, r3
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	f47f ae8e 	bne.w	8000738 <HAL_GPIO_Init+0x14>
  }
}
 8000a1c:	bf00      	nop
 8000a1e:	bf00      	nop
 8000a20:	372c      	adds	r7, #44	@ 0x2c
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr
 8000a28:	40010400 	.word	0x40010400

08000a2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	460b      	mov	r3, r1
 8000a36:	807b      	strh	r3, [r7, #2]
 8000a38:	4613      	mov	r3, r2
 8000a3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a3c:	787b      	ldrb	r3, [r7, #1]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d003      	beq.n	8000a4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a42:	887a      	ldrh	r2, [r7, #2]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000a48:	e003      	b.n	8000a52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a4a:	887b      	ldrh	r3, [r7, #2]
 8000a4c:	041a      	lsls	r2, r3, #16
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	611a      	str	r2, [r3, #16]
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr

08000a5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d101      	bne.n	8000a6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e272      	b.n	8000f54 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	f000 8087 	beq.w	8000b8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a7c:	4b92      	ldr	r3, [pc, #584]	@ (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	f003 030c 	and.w	r3, r3, #12
 8000a84:	2b04      	cmp	r3, #4
 8000a86:	d00c      	beq.n	8000aa2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a88:	4b8f      	ldr	r3, [pc, #572]	@ (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f003 030c 	and.w	r3, r3, #12
 8000a90:	2b08      	cmp	r3, #8
 8000a92:	d112      	bne.n	8000aba <HAL_RCC_OscConfig+0x5e>
 8000a94:	4b8c      	ldr	r3, [pc, #560]	@ (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000aa0:	d10b      	bne.n	8000aba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000aa2:	4b89      	ldr	r3, [pc, #548]	@ (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d06c      	beq.n	8000b88 <HAL_RCC_OscConfig+0x12c>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d168      	bne.n	8000b88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e24c      	b.n	8000f54 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ac2:	d106      	bne.n	8000ad2 <HAL_RCC_OscConfig+0x76>
 8000ac4:	4b80      	ldr	r3, [pc, #512]	@ (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a7f      	ldr	r2, [pc, #508]	@ (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000aca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ace:	6013      	str	r3, [r2, #0]
 8000ad0:	e02e      	b.n	8000b30 <HAL_RCC_OscConfig+0xd4>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d10c      	bne.n	8000af4 <HAL_RCC_OscConfig+0x98>
 8000ada:	4b7b      	ldr	r3, [pc, #492]	@ (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a7a      	ldr	r2, [pc, #488]	@ (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000ae0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ae4:	6013      	str	r3, [r2, #0]
 8000ae6:	4b78      	ldr	r3, [pc, #480]	@ (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a77      	ldr	r2, [pc, #476]	@ (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000aec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000af0:	6013      	str	r3, [r2, #0]
 8000af2:	e01d      	b.n	8000b30 <HAL_RCC_OscConfig+0xd4>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000afc:	d10c      	bne.n	8000b18 <HAL_RCC_OscConfig+0xbc>
 8000afe:	4b72      	ldr	r3, [pc, #456]	@ (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a71      	ldr	r2, [pc, #452]	@ (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000b04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b08:	6013      	str	r3, [r2, #0]
 8000b0a:	4b6f      	ldr	r3, [pc, #444]	@ (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a6e      	ldr	r2, [pc, #440]	@ (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000b10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b14:	6013      	str	r3, [r2, #0]
 8000b16:	e00b      	b.n	8000b30 <HAL_RCC_OscConfig+0xd4>
 8000b18:	4b6b      	ldr	r3, [pc, #428]	@ (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a6a      	ldr	r2, [pc, #424]	@ (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000b1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000b22:	6013      	str	r3, [r2, #0]
 8000b24:	4b68      	ldr	r3, [pc, #416]	@ (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a67      	ldr	r2, [pc, #412]	@ (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000b2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d013      	beq.n	8000b60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b38:	f7ff fd06 	bl	8000548 <HAL_GetTick>
 8000b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b3e:	e008      	b.n	8000b52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b40:	f7ff fd02 	bl	8000548 <HAL_GetTick>
 8000b44:	4602      	mov	r2, r0
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	2b64      	cmp	r3, #100	@ 0x64
 8000b4c:	d901      	bls.n	8000b52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	e200      	b.n	8000f54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b52:	4b5d      	ldr	r3, [pc, #372]	@ (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d0f0      	beq.n	8000b40 <HAL_RCC_OscConfig+0xe4>
 8000b5e:	e014      	b.n	8000b8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b60:	f7ff fcf2 	bl	8000548 <HAL_GetTick>
 8000b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b66:	e008      	b.n	8000b7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b68:	f7ff fcee 	bl	8000548 <HAL_GetTick>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	2b64      	cmp	r3, #100	@ 0x64
 8000b74:	d901      	bls.n	8000b7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000b76:	2303      	movs	r3, #3
 8000b78:	e1ec      	b.n	8000f54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b7a:	4b53      	ldr	r3, [pc, #332]	@ (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d1f0      	bne.n	8000b68 <HAL_RCC_OscConfig+0x10c>
 8000b86:	e000      	b.n	8000b8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d063      	beq.n	8000c5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b96:	4b4c      	ldr	r3, [pc, #304]	@ (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f003 030c 	and.w	r3, r3, #12
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d00b      	beq.n	8000bba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ba2:	4b49      	ldr	r3, [pc, #292]	@ (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f003 030c 	and.w	r3, r3, #12
 8000baa:	2b08      	cmp	r3, #8
 8000bac:	d11c      	bne.n	8000be8 <HAL_RCC_OscConfig+0x18c>
 8000bae:	4b46      	ldr	r3, [pc, #280]	@ (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d116      	bne.n	8000be8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bba:	4b43      	ldr	r3, [pc, #268]	@ (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d005      	beq.n	8000bd2 <HAL_RCC_OscConfig+0x176>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	691b      	ldr	r3, [r3, #16]
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d001      	beq.n	8000bd2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e1c0      	b.n	8000f54 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bd2:	4b3d      	ldr	r3, [pc, #244]	@ (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	00db      	lsls	r3, r3, #3
 8000be0:	4939      	ldr	r1, [pc, #228]	@ (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000be2:	4313      	orrs	r3, r2
 8000be4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000be6:	e03a      	b.n	8000c5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	691b      	ldr	r3, [r3, #16]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d020      	beq.n	8000c32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000bf0:	4b36      	ldr	r3, [pc, #216]	@ (8000ccc <HAL_RCC_OscConfig+0x270>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bf6:	f7ff fca7 	bl	8000548 <HAL_GetTick>
 8000bfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bfc:	e008      	b.n	8000c10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bfe:	f7ff fca3 	bl	8000548 <HAL_GetTick>
 8000c02:	4602      	mov	r2, r0
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	1ad3      	subs	r3, r2, r3
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d901      	bls.n	8000c10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	e1a1      	b.n	8000f54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c10:	4b2d      	ldr	r3, [pc, #180]	@ (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f003 0302 	and.w	r3, r3, #2
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d0f0      	beq.n	8000bfe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c1c:	4b2a      	ldr	r3, [pc, #168]	@ (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	695b      	ldr	r3, [r3, #20]
 8000c28:	00db      	lsls	r3, r3, #3
 8000c2a:	4927      	ldr	r1, [pc, #156]	@ (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	600b      	str	r3, [r1, #0]
 8000c30:	e015      	b.n	8000c5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c32:	4b26      	ldr	r3, [pc, #152]	@ (8000ccc <HAL_RCC_OscConfig+0x270>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c38:	f7ff fc86 	bl	8000548 <HAL_GetTick>
 8000c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c3e:	e008      	b.n	8000c52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c40:	f7ff fc82 	bl	8000548 <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d901      	bls.n	8000c52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	e180      	b.n	8000f54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c52:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1f0      	bne.n	8000c40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f003 0308 	and.w	r3, r3, #8
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d03a      	beq.n	8000ce0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	699b      	ldr	r3, [r3, #24]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d019      	beq.n	8000ca6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c72:	4b17      	ldr	r3, [pc, #92]	@ (8000cd0 <HAL_RCC_OscConfig+0x274>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c78:	f7ff fc66 	bl	8000548 <HAL_GetTick>
 8000c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c7e:	e008      	b.n	8000c92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c80:	f7ff fc62 	bl	8000548 <HAL_GetTick>
 8000c84:	4602      	mov	r2, r0
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d901      	bls.n	8000c92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	e160      	b.n	8000f54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c92:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d0f0      	beq.n	8000c80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	f000 fa9c 	bl	80011dc <RCC_Delay>
 8000ca4:	e01c      	b.n	8000ce0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd0 <HAL_RCC_OscConfig+0x274>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cac:	f7ff fc4c 	bl	8000548 <HAL_GetTick>
 8000cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cb2:	e00f      	b.n	8000cd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cb4:	f7ff fc48 	bl	8000548 <HAL_GetTick>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	2b02      	cmp	r3, #2
 8000cc0:	d908      	bls.n	8000cd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	e146      	b.n	8000f54 <HAL_RCC_OscConfig+0x4f8>
 8000cc6:	bf00      	nop
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	42420000 	.word	0x42420000
 8000cd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cd4:	4b92      	ldr	r3, [pc, #584]	@ (8000f20 <HAL_RCC_OscConfig+0x4c4>)
 8000cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cd8:	f003 0302 	and.w	r3, r3, #2
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d1e9      	bne.n	8000cb4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f003 0304 	and.w	r3, r3, #4
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	f000 80a6 	beq.w	8000e3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cf2:	4b8b      	ldr	r3, [pc, #556]	@ (8000f20 <HAL_RCC_OscConfig+0x4c4>)
 8000cf4:	69db      	ldr	r3, [r3, #28]
 8000cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d10d      	bne.n	8000d1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cfe:	4b88      	ldr	r3, [pc, #544]	@ (8000f20 <HAL_RCC_OscConfig+0x4c4>)
 8000d00:	69db      	ldr	r3, [r3, #28]
 8000d02:	4a87      	ldr	r2, [pc, #540]	@ (8000f20 <HAL_RCC_OscConfig+0x4c4>)
 8000d04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d08:	61d3      	str	r3, [r2, #28]
 8000d0a:	4b85      	ldr	r3, [pc, #532]	@ (8000f20 <HAL_RCC_OscConfig+0x4c4>)
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d16:	2301      	movs	r3, #1
 8000d18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d1a:	4b82      	ldr	r3, [pc, #520]	@ (8000f24 <HAL_RCC_OscConfig+0x4c8>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d118      	bne.n	8000d58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d26:	4b7f      	ldr	r3, [pc, #508]	@ (8000f24 <HAL_RCC_OscConfig+0x4c8>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a7e      	ldr	r2, [pc, #504]	@ (8000f24 <HAL_RCC_OscConfig+0x4c8>)
 8000d2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d32:	f7ff fc09 	bl	8000548 <HAL_GetTick>
 8000d36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d38:	e008      	b.n	8000d4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d3a:	f7ff fc05 	bl	8000548 <HAL_GetTick>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	1ad3      	subs	r3, r2, r3
 8000d44:	2b64      	cmp	r3, #100	@ 0x64
 8000d46:	d901      	bls.n	8000d4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	e103      	b.n	8000f54 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d4c:	4b75      	ldr	r3, [pc, #468]	@ (8000f24 <HAL_RCC_OscConfig+0x4c8>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d0f0      	beq.n	8000d3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d106      	bne.n	8000d6e <HAL_RCC_OscConfig+0x312>
 8000d60:	4b6f      	ldr	r3, [pc, #444]	@ (8000f20 <HAL_RCC_OscConfig+0x4c4>)
 8000d62:	6a1b      	ldr	r3, [r3, #32]
 8000d64:	4a6e      	ldr	r2, [pc, #440]	@ (8000f20 <HAL_RCC_OscConfig+0x4c4>)
 8000d66:	f043 0301 	orr.w	r3, r3, #1
 8000d6a:	6213      	str	r3, [r2, #32]
 8000d6c:	e02d      	b.n	8000dca <HAL_RCC_OscConfig+0x36e>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d10c      	bne.n	8000d90 <HAL_RCC_OscConfig+0x334>
 8000d76:	4b6a      	ldr	r3, [pc, #424]	@ (8000f20 <HAL_RCC_OscConfig+0x4c4>)
 8000d78:	6a1b      	ldr	r3, [r3, #32]
 8000d7a:	4a69      	ldr	r2, [pc, #420]	@ (8000f20 <HAL_RCC_OscConfig+0x4c4>)
 8000d7c:	f023 0301 	bic.w	r3, r3, #1
 8000d80:	6213      	str	r3, [r2, #32]
 8000d82:	4b67      	ldr	r3, [pc, #412]	@ (8000f20 <HAL_RCC_OscConfig+0x4c4>)
 8000d84:	6a1b      	ldr	r3, [r3, #32]
 8000d86:	4a66      	ldr	r2, [pc, #408]	@ (8000f20 <HAL_RCC_OscConfig+0x4c4>)
 8000d88:	f023 0304 	bic.w	r3, r3, #4
 8000d8c:	6213      	str	r3, [r2, #32]
 8000d8e:	e01c      	b.n	8000dca <HAL_RCC_OscConfig+0x36e>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	2b05      	cmp	r3, #5
 8000d96:	d10c      	bne.n	8000db2 <HAL_RCC_OscConfig+0x356>
 8000d98:	4b61      	ldr	r3, [pc, #388]	@ (8000f20 <HAL_RCC_OscConfig+0x4c4>)
 8000d9a:	6a1b      	ldr	r3, [r3, #32]
 8000d9c:	4a60      	ldr	r2, [pc, #384]	@ (8000f20 <HAL_RCC_OscConfig+0x4c4>)
 8000d9e:	f043 0304 	orr.w	r3, r3, #4
 8000da2:	6213      	str	r3, [r2, #32]
 8000da4:	4b5e      	ldr	r3, [pc, #376]	@ (8000f20 <HAL_RCC_OscConfig+0x4c4>)
 8000da6:	6a1b      	ldr	r3, [r3, #32]
 8000da8:	4a5d      	ldr	r2, [pc, #372]	@ (8000f20 <HAL_RCC_OscConfig+0x4c4>)
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	6213      	str	r3, [r2, #32]
 8000db0:	e00b      	b.n	8000dca <HAL_RCC_OscConfig+0x36e>
 8000db2:	4b5b      	ldr	r3, [pc, #364]	@ (8000f20 <HAL_RCC_OscConfig+0x4c4>)
 8000db4:	6a1b      	ldr	r3, [r3, #32]
 8000db6:	4a5a      	ldr	r2, [pc, #360]	@ (8000f20 <HAL_RCC_OscConfig+0x4c4>)
 8000db8:	f023 0301 	bic.w	r3, r3, #1
 8000dbc:	6213      	str	r3, [r2, #32]
 8000dbe:	4b58      	ldr	r3, [pc, #352]	@ (8000f20 <HAL_RCC_OscConfig+0x4c4>)
 8000dc0:	6a1b      	ldr	r3, [r3, #32]
 8000dc2:	4a57      	ldr	r2, [pc, #348]	@ (8000f20 <HAL_RCC_OscConfig+0x4c4>)
 8000dc4:	f023 0304 	bic.w	r3, r3, #4
 8000dc8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d015      	beq.n	8000dfe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dd2:	f7ff fbb9 	bl	8000548 <HAL_GetTick>
 8000dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dd8:	e00a      	b.n	8000df0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dda:	f7ff fbb5 	bl	8000548 <HAL_GetTick>
 8000dde:	4602      	mov	r2, r0
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d901      	bls.n	8000df0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000dec:	2303      	movs	r3, #3
 8000dee:	e0b1      	b.n	8000f54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000df0:	4b4b      	ldr	r3, [pc, #300]	@ (8000f20 <HAL_RCC_OscConfig+0x4c4>)
 8000df2:	6a1b      	ldr	r3, [r3, #32]
 8000df4:	f003 0302 	and.w	r3, r3, #2
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d0ee      	beq.n	8000dda <HAL_RCC_OscConfig+0x37e>
 8000dfc:	e014      	b.n	8000e28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dfe:	f7ff fba3 	bl	8000548 <HAL_GetTick>
 8000e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e04:	e00a      	b.n	8000e1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e06:	f7ff fb9f 	bl	8000548 <HAL_GetTick>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d901      	bls.n	8000e1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	e09b      	b.n	8000f54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e1c:	4b40      	ldr	r3, [pc, #256]	@ (8000f20 <HAL_RCC_OscConfig+0x4c4>)
 8000e1e:	6a1b      	ldr	r3, [r3, #32]
 8000e20:	f003 0302 	and.w	r3, r3, #2
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d1ee      	bne.n	8000e06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000e28:	7dfb      	ldrb	r3, [r7, #23]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d105      	bne.n	8000e3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e2e:	4b3c      	ldr	r3, [pc, #240]	@ (8000f20 <HAL_RCC_OscConfig+0x4c4>)
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	4a3b      	ldr	r2, [pc, #236]	@ (8000f20 <HAL_RCC_OscConfig+0x4c4>)
 8000e34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000e38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	69db      	ldr	r3, [r3, #28]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f000 8087 	beq.w	8000f52 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e44:	4b36      	ldr	r3, [pc, #216]	@ (8000f20 <HAL_RCC_OscConfig+0x4c4>)
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 030c 	and.w	r3, r3, #12
 8000e4c:	2b08      	cmp	r3, #8
 8000e4e:	d061      	beq.n	8000f14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	69db      	ldr	r3, [r3, #28]
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d146      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e58:	4b33      	ldr	r3, [pc, #204]	@ (8000f28 <HAL_RCC_OscConfig+0x4cc>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e5e:	f7ff fb73 	bl	8000548 <HAL_GetTick>
 8000e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e64:	e008      	b.n	8000e78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e66:	f7ff fb6f 	bl	8000548 <HAL_GetTick>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d901      	bls.n	8000e78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000e74:	2303      	movs	r3, #3
 8000e76:	e06d      	b.n	8000f54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e78:	4b29      	ldr	r3, [pc, #164]	@ (8000f20 <HAL_RCC_OscConfig+0x4c4>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d1f0      	bne.n	8000e66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6a1b      	ldr	r3, [r3, #32]
 8000e88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e8c:	d108      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e8e:	4b24      	ldr	r3, [pc, #144]	@ (8000f20 <HAL_RCC_OscConfig+0x4c4>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	4921      	ldr	r1, [pc, #132]	@ (8000f20 <HAL_RCC_OscConfig+0x4c4>)
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ea0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f20 <HAL_RCC_OscConfig+0x4c4>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6a19      	ldr	r1, [r3, #32]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eb0:	430b      	orrs	r3, r1
 8000eb2:	491b      	ldr	r1, [pc, #108]	@ (8000f20 <HAL_RCC_OscConfig+0x4c4>)
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f28 <HAL_RCC_OscConfig+0x4cc>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ebe:	f7ff fb43 	bl	8000548 <HAL_GetTick>
 8000ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ec4:	e008      	b.n	8000ed8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ec6:	f7ff fb3f 	bl	8000548 <HAL_GetTick>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d901      	bls.n	8000ed8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	e03d      	b.n	8000f54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ed8:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <HAL_RCC_OscConfig+0x4c4>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d0f0      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x46a>
 8000ee4:	e035      	b.n	8000f52 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ee6:	4b10      	ldr	r3, [pc, #64]	@ (8000f28 <HAL_RCC_OscConfig+0x4cc>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eec:	f7ff fb2c 	bl	8000548 <HAL_GetTick>
 8000ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ef2:	e008      	b.n	8000f06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ef4:	f7ff fb28 	bl	8000548 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d901      	bls.n	8000f06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000f02:	2303      	movs	r3, #3
 8000f04:	e026      	b.n	8000f54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f06:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <HAL_RCC_OscConfig+0x4c4>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d1f0      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x498>
 8000f12:	e01e      	b.n	8000f52 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	69db      	ldr	r3, [r3, #28]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d107      	bne.n	8000f2c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e019      	b.n	8000f54 <HAL_RCC_OscConfig+0x4f8>
 8000f20:	40021000 	.word	0x40021000
 8000f24:	40007000 	.word	0x40007000
 8000f28:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f5c <HAL_RCC_OscConfig+0x500>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6a1b      	ldr	r3, [r3, #32]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d106      	bne.n	8000f4e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d001      	beq.n	8000f52 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e000      	b.n	8000f54 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3718      	adds	r7, #24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40021000 	.word	0x40021000

08000f60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d101      	bne.n	8000f74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e0d0      	b.n	8001116 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f74:	4b6a      	ldr	r3, [pc, #424]	@ (8001120 <HAL_RCC_ClockConfig+0x1c0>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f003 0307 	and.w	r3, r3, #7
 8000f7c:	683a      	ldr	r2, [r7, #0]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d910      	bls.n	8000fa4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f82:	4b67      	ldr	r3, [pc, #412]	@ (8001120 <HAL_RCC_ClockConfig+0x1c0>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f023 0207 	bic.w	r2, r3, #7
 8000f8a:	4965      	ldr	r1, [pc, #404]	@ (8001120 <HAL_RCC_ClockConfig+0x1c0>)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f92:	4b63      	ldr	r3, [pc, #396]	@ (8001120 <HAL_RCC_ClockConfig+0x1c0>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	683a      	ldr	r2, [r7, #0]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d001      	beq.n	8000fa4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e0b8      	b.n	8001116 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f003 0302 	and.w	r3, r3, #2
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d020      	beq.n	8000ff2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 0304 	and.w	r3, r3, #4
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d005      	beq.n	8000fc8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fbc:	4b59      	ldr	r3, [pc, #356]	@ (8001124 <HAL_RCC_ClockConfig+0x1c4>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	4a58      	ldr	r2, [pc, #352]	@ (8001124 <HAL_RCC_ClockConfig+0x1c4>)
 8000fc2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000fc6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 0308 	and.w	r3, r3, #8
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d005      	beq.n	8000fe0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fd4:	4b53      	ldr	r3, [pc, #332]	@ (8001124 <HAL_RCC_ClockConfig+0x1c4>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	4a52      	ldr	r2, [pc, #328]	@ (8001124 <HAL_RCC_ClockConfig+0x1c4>)
 8000fda:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8000fde:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fe0:	4b50      	ldr	r3, [pc, #320]	@ (8001124 <HAL_RCC_ClockConfig+0x1c4>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	494d      	ldr	r1, [pc, #308]	@ (8001124 <HAL_RCC_ClockConfig+0x1c4>)
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d040      	beq.n	8001080 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d107      	bne.n	8001016 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001006:	4b47      	ldr	r3, [pc, #284]	@ (8001124 <HAL_RCC_ClockConfig+0x1c4>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d115      	bne.n	800103e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e07f      	b.n	8001116 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	2b02      	cmp	r3, #2
 800101c:	d107      	bne.n	800102e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800101e:	4b41      	ldr	r3, [pc, #260]	@ (8001124 <HAL_RCC_ClockConfig+0x1c4>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d109      	bne.n	800103e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e073      	b.n	8001116 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800102e:	4b3d      	ldr	r3, [pc, #244]	@ (8001124 <HAL_RCC_ClockConfig+0x1c4>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e06b      	b.n	8001116 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800103e:	4b39      	ldr	r3, [pc, #228]	@ (8001124 <HAL_RCC_ClockConfig+0x1c4>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f023 0203 	bic.w	r2, r3, #3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	4936      	ldr	r1, [pc, #216]	@ (8001124 <HAL_RCC_ClockConfig+0x1c4>)
 800104c:	4313      	orrs	r3, r2
 800104e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001050:	f7ff fa7a 	bl	8000548 <HAL_GetTick>
 8001054:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001056:	e00a      	b.n	800106e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001058:	f7ff fa76 	bl	8000548 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001066:	4293      	cmp	r3, r2
 8001068:	d901      	bls.n	800106e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e053      	b.n	8001116 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800106e:	4b2d      	ldr	r3, [pc, #180]	@ (8001124 <HAL_RCC_ClockConfig+0x1c4>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f003 020c 	and.w	r2, r3, #12
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	429a      	cmp	r2, r3
 800107e:	d1eb      	bne.n	8001058 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001080:	4b27      	ldr	r3, [pc, #156]	@ (8001120 <HAL_RCC_ClockConfig+0x1c0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 0307 	and.w	r3, r3, #7
 8001088:	683a      	ldr	r2, [r7, #0]
 800108a:	429a      	cmp	r2, r3
 800108c:	d210      	bcs.n	80010b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800108e:	4b24      	ldr	r3, [pc, #144]	@ (8001120 <HAL_RCC_ClockConfig+0x1c0>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f023 0207 	bic.w	r2, r3, #7
 8001096:	4922      	ldr	r1, [pc, #136]	@ (8001120 <HAL_RCC_ClockConfig+0x1c0>)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	4313      	orrs	r3, r2
 800109c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800109e:	4b20      	ldr	r3, [pc, #128]	@ (8001120 <HAL_RCC_ClockConfig+0x1c0>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	683a      	ldr	r2, [r7, #0]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d001      	beq.n	80010b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e032      	b.n	8001116 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0304 	and.w	r3, r3, #4
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d008      	beq.n	80010ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010bc:	4b19      	ldr	r3, [pc, #100]	@ (8001124 <HAL_RCC_ClockConfig+0x1c4>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	4916      	ldr	r1, [pc, #88]	@ (8001124 <HAL_RCC_ClockConfig+0x1c4>)
 80010ca:	4313      	orrs	r3, r2
 80010cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0308 	and.w	r3, r3, #8
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d009      	beq.n	80010ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80010da:	4b12      	ldr	r3, [pc, #72]	@ (8001124 <HAL_RCC_ClockConfig+0x1c4>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	691b      	ldr	r3, [r3, #16]
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	490e      	ldr	r1, [pc, #56]	@ (8001124 <HAL_RCC_ClockConfig+0x1c4>)
 80010ea:	4313      	orrs	r3, r2
 80010ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80010ee:	f000 f821 	bl	8001134 <HAL_RCC_GetSysClockFreq>
 80010f2:	4602      	mov	r2, r0
 80010f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <HAL_RCC_ClockConfig+0x1c4>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	091b      	lsrs	r3, r3, #4
 80010fa:	f003 030f 	and.w	r3, r3, #15
 80010fe:	490a      	ldr	r1, [pc, #40]	@ (8001128 <HAL_RCC_ClockConfig+0x1c8>)
 8001100:	5ccb      	ldrb	r3, [r1, r3]
 8001102:	fa22 f303 	lsr.w	r3, r2, r3
 8001106:	4a09      	ldr	r2, [pc, #36]	@ (800112c <HAL_RCC_ClockConfig+0x1cc>)
 8001108:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800110a:	4b09      	ldr	r3, [pc, #36]	@ (8001130 <HAL_RCC_ClockConfig+0x1d0>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff f9d8 	bl	80004c4 <HAL_InitTick>

  return HAL_OK;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40022000 	.word	0x40022000
 8001124:	40021000 	.word	0x40021000
 8001128:	08003f1c 	.word	0x08003f1c
 800112c:	20000004 	.word	0x20000004
 8001130:	20000008 	.word	0x20000008

08001134 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001134:	b480      	push	{r7}
 8001136:	b087      	sub	sp, #28
 8001138:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800114e:	4b1e      	ldr	r3, [pc, #120]	@ (80011c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f003 030c 	and.w	r3, r3, #12
 800115a:	2b04      	cmp	r3, #4
 800115c:	d002      	beq.n	8001164 <HAL_RCC_GetSysClockFreq+0x30>
 800115e:	2b08      	cmp	r3, #8
 8001160:	d003      	beq.n	800116a <HAL_RCC_GetSysClockFreq+0x36>
 8001162:	e027      	b.n	80011b4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001164:	4b19      	ldr	r3, [pc, #100]	@ (80011cc <HAL_RCC_GetSysClockFreq+0x98>)
 8001166:	613b      	str	r3, [r7, #16]
      break;
 8001168:	e027      	b.n	80011ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	0c9b      	lsrs	r3, r3, #18
 800116e:	f003 030f 	and.w	r3, r3, #15
 8001172:	4a17      	ldr	r2, [pc, #92]	@ (80011d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001174:	5cd3      	ldrb	r3, [r2, r3]
 8001176:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d010      	beq.n	80011a4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001182:	4b11      	ldr	r3, [pc, #68]	@ (80011c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	0c5b      	lsrs	r3, r3, #17
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	4a11      	ldr	r2, [pc, #68]	@ (80011d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800118e:	5cd3      	ldrb	r3, [r2, r3]
 8001190:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a0d      	ldr	r2, [pc, #52]	@ (80011cc <HAL_RCC_GetSysClockFreq+0x98>)
 8001196:	fb03 f202 	mul.w	r2, r3, r2
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a0:	617b      	str	r3, [r7, #20]
 80011a2:	e004      	b.n	80011ae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a0c      	ldr	r2, [pc, #48]	@ (80011d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80011a8:	fb02 f303 	mul.w	r3, r2, r3
 80011ac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	613b      	str	r3, [r7, #16]
      break;
 80011b2:	e002      	b.n	80011ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80011b4:	4b05      	ldr	r3, [pc, #20]	@ (80011cc <HAL_RCC_GetSysClockFreq+0x98>)
 80011b6:	613b      	str	r3, [r7, #16]
      break;
 80011b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80011ba:	693b      	ldr	r3, [r7, #16]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	371c      	adds	r7, #28
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bc80      	pop	{r7}
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	40021000 	.word	0x40021000
 80011cc:	007a1200 	.word	0x007a1200
 80011d0:	08003f2c 	.word	0x08003f2c
 80011d4:	08003f3c 	.word	0x08003f3c
 80011d8:	003d0900 	.word	0x003d0900

080011dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80011e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001210 <RCC_Delay+0x34>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001214 <RCC_Delay+0x38>)
 80011ea:	fba2 2303 	umull	r2, r3, r2, r3
 80011ee:	0a5b      	lsrs	r3, r3, #9
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	fb02 f303 	mul.w	r3, r2, r3
 80011f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80011f8:	bf00      	nop
  }
  while (Delay --);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	1e5a      	subs	r2, r3, #1
 80011fe:	60fa      	str	r2, [r7, #12]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1f9      	bne.n	80011f8 <RCC_Delay+0x1c>
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	3714      	adds	r7, #20
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr
 8001210:	20000004 	.word	0x20000004
 8001214:	10624dd3 	.word	0x10624dd3

08001218 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800121e:	f3ef 8305 	mrs	r3, IPSR
 8001222:	60bb      	str	r3, [r7, #8]
  return(result);
 8001224:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001226:	2b00      	cmp	r3, #0
 8001228:	d10f      	bne.n	800124a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800122a:	f3ef 8310 	mrs	r3, PRIMASK
 800122e:	607b      	str	r3, [r7, #4]
  return(result);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d109      	bne.n	800124a <osKernelInitialize+0x32>
 8001236:	4b10      	ldr	r3, [pc, #64]	@ (8001278 <osKernelInitialize+0x60>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b02      	cmp	r3, #2
 800123c:	d109      	bne.n	8001252 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800123e:	f3ef 8311 	mrs	r3, BASEPRI
 8001242:	603b      	str	r3, [r7, #0]
  return(result);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800124a:	f06f 0305 	mvn.w	r3, #5
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	e00c      	b.n	800126c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001252:	4b09      	ldr	r3, [pc, #36]	@ (8001278 <osKernelInitialize+0x60>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d105      	bne.n	8001266 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800125a:	4b07      	ldr	r3, [pc, #28]	@ (8001278 <osKernelInitialize+0x60>)
 800125c:	2201      	movs	r2, #1
 800125e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001260:	2300      	movs	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	e002      	b.n	800126c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001266:	f04f 33ff 	mov.w	r3, #4294967295
 800126a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800126c:	68fb      	ldr	r3, [r7, #12]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3714      	adds	r7, #20
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr
 8001278:	20000090 	.word	0x20000090

0800127c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001282:	f3ef 8305 	mrs	r3, IPSR
 8001286:	60bb      	str	r3, [r7, #8]
  return(result);
 8001288:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10f      	bne.n	80012ae <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800128e:	f3ef 8310 	mrs	r3, PRIMASK
 8001292:	607b      	str	r3, [r7, #4]
  return(result);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d109      	bne.n	80012ae <osKernelStart+0x32>
 800129a:	4b11      	ldr	r3, [pc, #68]	@ (80012e0 <osKernelStart+0x64>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d109      	bne.n	80012b6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80012a2:	f3ef 8311 	mrs	r3, BASEPRI
 80012a6:	603b      	str	r3, [r7, #0]
  return(result);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80012ae:	f06f 0305 	mvn.w	r3, #5
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	e00e      	b.n	80012d4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80012b6:	4b0a      	ldr	r3, [pc, #40]	@ (80012e0 <osKernelStart+0x64>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d107      	bne.n	80012ce <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80012be:	4b08      	ldr	r3, [pc, #32]	@ (80012e0 <osKernelStart+0x64>)
 80012c0:	2202      	movs	r2, #2
 80012c2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80012c4:	f001 f8a8 	bl	8002418 <vTaskStartScheduler>
      stat = osOK;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	e002      	b.n	80012d4 <osKernelStart+0x58>
    } else {
      stat = osError;
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295
 80012d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80012d4:	68fb      	ldr	r3, [r7, #12]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000090 	.word	0x20000090

080012e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b092      	sub	sp, #72	@ 0x48
 80012e8:	af04      	add	r7, sp, #16
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80012f4:	f3ef 8305 	mrs	r3, IPSR
 80012f8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80012fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f040 8094 	bne.w	800142a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001302:	f3ef 8310 	mrs	r3, PRIMASK
 8001306:	623b      	str	r3, [r7, #32]
  return(result);
 8001308:	6a3b      	ldr	r3, [r7, #32]
 800130a:	2b00      	cmp	r3, #0
 800130c:	f040 808d 	bne.w	800142a <osThreadNew+0x146>
 8001310:	4b48      	ldr	r3, [pc, #288]	@ (8001434 <osThreadNew+0x150>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b02      	cmp	r3, #2
 8001316:	d106      	bne.n	8001326 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001318:	f3ef 8311 	mrs	r3, BASEPRI
 800131c:	61fb      	str	r3, [r7, #28]
  return(result);
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	2b00      	cmp	r3, #0
 8001322:	f040 8082 	bne.w	800142a <osThreadNew+0x146>
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d07e      	beq.n	800142a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800132c:	2380      	movs	r3, #128	@ 0x80
 800132e:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8001330:	2318      	movs	r3, #24
 8001332:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8001334:	2300      	movs	r3, #0
 8001336:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8001338:	f107 031b 	add.w	r3, r7, #27
 800133c:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 800133e:	f04f 33ff 	mov.w	r3, #4294967295
 8001342:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d045      	beq.n	80013d6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d002      	beq.n	8001358 <osThreadNew+0x74>
        name = attr->name;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d002      	beq.n	8001366 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001368:	2b00      	cmp	r3, #0
 800136a:	d008      	beq.n	800137e <osThreadNew+0x9a>
 800136c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800136e:	2b38      	cmp	r3, #56	@ 0x38
 8001370:	d805      	bhi.n	800137e <osThreadNew+0x9a>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <osThreadNew+0x9e>
        return (NULL);
 800137e:	2300      	movs	r3, #0
 8001380:	e054      	b.n	800142c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	089b      	lsrs	r3, r3, #2
 8001390:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d00e      	beq.n	80013b8 <osThreadNew+0xd4>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	2ba7      	cmp	r3, #167	@ 0xa7
 80013a0:	d90a      	bls.n	80013b8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d006      	beq.n	80013b8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d002      	beq.n	80013b8 <osThreadNew+0xd4>
        mem = 1;
 80013b2:	2301      	movs	r3, #1
 80013b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013b6:	e010      	b.n	80013da <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d10c      	bne.n	80013da <osThreadNew+0xf6>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d108      	bne.n	80013da <osThreadNew+0xf6>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	691b      	ldr	r3, [r3, #16]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d104      	bne.n	80013da <osThreadNew+0xf6>
          mem = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013d4:	e001      	b.n	80013da <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 80013da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d110      	bne.n	8001402 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80013e8:	9202      	str	r2, [sp, #8]
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80013f4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80013f6:	68f8      	ldr	r0, [r7, #12]
 80013f8:	f000 fe24 	bl	8002044 <xTaskCreateStatic>
 80013fc:	4603      	mov	r3, r0
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	e013      	b.n	800142a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8001402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001404:	2b00      	cmp	r3, #0
 8001406:	d110      	bne.n	800142a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800140a:	b29a      	uxth	r2, r3
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	9301      	str	r3, [sp, #4]
 8001412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800141a:	68f8      	ldr	r0, [r7, #12]
 800141c:	f000 fe71 	bl	8002102 <xTaskCreate>
 8001420:	4603      	mov	r3, r0
 8001422:	2b01      	cmp	r3, #1
 8001424:	d001      	beq.n	800142a <osThreadNew+0x146>
          hTask = NULL;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800142a:	697b      	ldr	r3, [r7, #20]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3738      	adds	r7, #56	@ 0x38
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000090 	.word	0x20000090

08001438 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001440:	f3ef 8305 	mrs	r3, IPSR
 8001444:	613b      	str	r3, [r7, #16]
  return(result);
 8001446:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001448:	2b00      	cmp	r3, #0
 800144a:	d10f      	bne.n	800146c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800144c:	f3ef 8310 	mrs	r3, PRIMASK
 8001450:	60fb      	str	r3, [r7, #12]
  return(result);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d109      	bne.n	800146c <osDelay+0x34>
 8001458:	4b0d      	ldr	r3, [pc, #52]	@ (8001490 <osDelay+0x58>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b02      	cmp	r3, #2
 800145e:	d109      	bne.n	8001474 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001460:	f3ef 8311 	mrs	r3, BASEPRI
 8001464:	60bb      	str	r3, [r7, #8]
  return(result);
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d003      	beq.n	8001474 <osDelay+0x3c>
    stat = osErrorISR;
 800146c:	f06f 0305 	mvn.w	r3, #5
 8001470:	617b      	str	r3, [r7, #20]
 8001472:	e007      	b.n	8001484 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d002      	beq.n	8001484 <osDelay+0x4c>
      vTaskDelay(ticks);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f000 ff94 	bl	80023ac <vTaskDelay>
    }
  }

  return (stat);
 8001484:	697b      	ldr	r3, [r7, #20]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000090 	.word	0x20000090

08001494 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4a06      	ldr	r2, [pc, #24]	@ (80014bc <vApplicationGetIdleTaskMemory+0x28>)
 80014a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	4a05      	ldr	r2, [pc, #20]	@ (80014c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80014aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2280      	movs	r2, #128	@ 0x80
 80014b0:	601a      	str	r2, [r3, #0]
}
 80014b2:	bf00      	nop
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr
 80014bc:	20000094 	.word	0x20000094
 80014c0:	2000013c 	.word	0x2000013c

080014c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4a07      	ldr	r2, [pc, #28]	@ (80014f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80014d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	4a06      	ldr	r2, [pc, #24]	@ (80014f4 <vApplicationGetTimerTaskMemory+0x30>)
 80014da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014e2:	601a      	str	r2, [r3, #0]
}
 80014e4:	bf00      	nop
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	2000033c 	.word	0x2000033c
 80014f4:	200003e4 	.word	0x200003e4

080014f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f103 0208 	add.w	r2, r3, #8
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f04f 32ff 	mov.w	r2, #4294967295
 8001510:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f103 0208 	add.w	r2, r3, #8
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f103 0208 	add.w	r2, r3, #8
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr

08001536 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr

0800154e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800154e:	b480      	push	{r7}
 8001550:	b085      	sub	sp, #20
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
 8001556:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	1c5a      	adds	r2, r3, #1
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	601a      	str	r2, [r3, #0]
}
 800158a:	bf00      	nop
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr

08001594 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015aa:	d103      	bne.n	80015b4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	691b      	ldr	r3, [r3, #16]
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	e00c      	b.n	80015ce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3308      	adds	r3, #8
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	e002      	b.n	80015c2 <vListInsert+0x2e>
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68ba      	ldr	r2, [r7, #8]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d2f6      	bcs.n	80015bc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	685a      	ldr	r2, [r3, #4]
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	1c5a      	adds	r2, r3, #1
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	601a      	str	r2, [r3, #0]
}
 80015fa:	bf00      	nop
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr

08001604 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	6892      	ldr	r2, [r2, #8]
 800161a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	6852      	ldr	r2, [r2, #4]
 8001624:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	429a      	cmp	r2, r3
 800162e:	d103      	bne.n	8001638 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	1e5a      	subs	r2, r3, #1
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr
	...

08001658 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d10b      	bne.n	8001684 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800166c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001670:	f383 8811 	msr	BASEPRI, r3
 8001674:	f3bf 8f6f 	isb	sy
 8001678:	f3bf 8f4f 	dsb	sy
 800167c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800167e:	bf00      	nop
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001684:	f002 f822 	bl	80036cc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001690:	68f9      	ldr	r1, [r7, #12]
 8001692:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001694:	fb01 f303 	mul.w	r3, r1, r3
 8001698:	441a      	add	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2200      	movs	r2, #0
 80016a2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016b4:	3b01      	subs	r3, #1
 80016b6:	68f9      	ldr	r1, [r7, #12]
 80016b8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80016ba:	fb01 f303 	mul.w	r3, r1, r3
 80016be:	441a      	add	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	22ff      	movs	r2, #255	@ 0xff
 80016c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	22ff      	movs	r2, #255	@ 0xff
 80016d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d114      	bne.n	8001704 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d01a      	beq.n	8001718 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	3310      	adds	r3, #16
 80016e6:	4618      	mov	r0, r3
 80016e8:	f001 f936 	bl	8002958 <xTaskRemoveFromEventList>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d012      	beq.n	8001718 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80016f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001728 <xQueueGenericReset+0xd0>)
 80016f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	f3bf 8f4f 	dsb	sy
 80016fe:	f3bf 8f6f 	isb	sy
 8001702:	e009      	b.n	8001718 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	3310      	adds	r3, #16
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fef5 	bl	80014f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	3324      	adds	r3, #36	@ 0x24
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fef0 	bl	80014f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001718:	f002 f808 	bl	800372c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800171c:	2301      	movs	r3, #1
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	e000ed04 	.word	0xe000ed04

0800172c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08e      	sub	sp, #56	@ 0x38
 8001730:	af02      	add	r7, sp, #8
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
 8001738:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d10b      	bne.n	8001758 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8001740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001744:	f383 8811 	msr	BASEPRI, r3
 8001748:	f3bf 8f6f 	isb	sy
 800174c:	f3bf 8f4f 	dsb	sy
 8001750:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001752:	bf00      	nop
 8001754:	bf00      	nop
 8001756:	e7fd      	b.n	8001754 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10b      	bne.n	8001776 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800175e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001762:	f383 8811 	msr	BASEPRI, r3
 8001766:	f3bf 8f6f 	isb	sy
 800176a:	f3bf 8f4f 	dsb	sy
 800176e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001770:	bf00      	nop
 8001772:	bf00      	nop
 8001774:	e7fd      	b.n	8001772 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d002      	beq.n	8001782 <xQueueGenericCreateStatic+0x56>
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <xQueueGenericCreateStatic+0x5a>
 8001782:	2301      	movs	r3, #1
 8001784:	e000      	b.n	8001788 <xQueueGenericCreateStatic+0x5c>
 8001786:	2300      	movs	r3, #0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d10b      	bne.n	80017a4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800178c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001790:	f383 8811 	msr	BASEPRI, r3
 8001794:	f3bf 8f6f 	isb	sy
 8001798:	f3bf 8f4f 	dsb	sy
 800179c:	623b      	str	r3, [r7, #32]
}
 800179e:	bf00      	nop
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d102      	bne.n	80017b0 <xQueueGenericCreateStatic+0x84>
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d101      	bne.n	80017b4 <xQueueGenericCreateStatic+0x88>
 80017b0:	2301      	movs	r3, #1
 80017b2:	e000      	b.n	80017b6 <xQueueGenericCreateStatic+0x8a>
 80017b4:	2300      	movs	r3, #0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d10b      	bne.n	80017d2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80017ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017be:	f383 8811 	msr	BASEPRI, r3
 80017c2:	f3bf 8f6f 	isb	sy
 80017c6:	f3bf 8f4f 	dsb	sy
 80017ca:	61fb      	str	r3, [r7, #28]
}
 80017cc:	bf00      	nop
 80017ce:	bf00      	nop
 80017d0:	e7fd      	b.n	80017ce <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80017d2:	2350      	movs	r3, #80	@ 0x50
 80017d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	2b50      	cmp	r3, #80	@ 0x50
 80017da:	d00b      	beq.n	80017f4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80017dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017e0:	f383 8811 	msr	BASEPRI, r3
 80017e4:	f3bf 8f6f 	isb	sy
 80017e8:	f3bf 8f4f 	dsb	sy
 80017ec:	61bb      	str	r3, [r7, #24]
}
 80017ee:	bf00      	nop
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80017f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d00d      	beq.n	800181a <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80017fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001800:	2201      	movs	r2, #1
 8001802:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001806:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800180a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800180c:	9300      	str	r3, [sp, #0]
 800180e:	4613      	mov	r3, r2
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	68b9      	ldr	r1, [r7, #8]
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	f000 f805 	bl	8001824 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800181a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800181c:	4618      	mov	r0, r3
 800181e:	3730      	adds	r7, #48	@ 0x30
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
 8001830:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d103      	bne.n	8001840 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	e002      	b.n	8001846 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001852:	2101      	movs	r1, #1
 8001854:	69b8      	ldr	r0, [r7, #24]
 8001856:	f7ff feff 	bl	8001658 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	78fa      	ldrb	r2, [r7, #3]
 800185e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001862:	bf00      	nop
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
	...

0800186c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08e      	sub	sp, #56	@ 0x38
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
 8001878:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800187a:	2300      	movs	r3, #0
 800187c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8001882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001884:	2b00      	cmp	r3, #0
 8001886:	d10b      	bne.n	80018a0 <xQueueGenericSend+0x34>
	__asm volatile
 8001888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800188c:	f383 8811 	msr	BASEPRI, r3
 8001890:	f3bf 8f6f 	isb	sy
 8001894:	f3bf 8f4f 	dsb	sy
 8001898:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800189a:	bf00      	nop
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d103      	bne.n	80018ae <xQueueGenericSend+0x42>
 80018a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <xQueueGenericSend+0x46>
 80018ae:	2301      	movs	r3, #1
 80018b0:	e000      	b.n	80018b4 <xQueueGenericSend+0x48>
 80018b2:	2300      	movs	r3, #0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d10b      	bne.n	80018d0 <xQueueGenericSend+0x64>
	__asm volatile
 80018b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018bc:	f383 8811 	msr	BASEPRI, r3
 80018c0:	f3bf 8f6f 	isb	sy
 80018c4:	f3bf 8f4f 	dsb	sy
 80018c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80018ca:	bf00      	nop
 80018cc:	bf00      	nop
 80018ce:	e7fd      	b.n	80018cc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d103      	bne.n	80018de <xQueueGenericSend+0x72>
 80018d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d101      	bne.n	80018e2 <xQueueGenericSend+0x76>
 80018de:	2301      	movs	r3, #1
 80018e0:	e000      	b.n	80018e4 <xQueueGenericSend+0x78>
 80018e2:	2300      	movs	r3, #0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d10b      	bne.n	8001900 <xQueueGenericSend+0x94>
	__asm volatile
 80018e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018ec:	f383 8811 	msr	BASEPRI, r3
 80018f0:	f3bf 8f6f 	isb	sy
 80018f4:	f3bf 8f4f 	dsb	sy
 80018f8:	623b      	str	r3, [r7, #32]
}
 80018fa:	bf00      	nop
 80018fc:	bf00      	nop
 80018fe:	e7fd      	b.n	80018fc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001900:	f001 f9f4 	bl	8002cec <xTaskGetSchedulerState>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d102      	bne.n	8001910 <xQueueGenericSend+0xa4>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d101      	bne.n	8001914 <xQueueGenericSend+0xa8>
 8001910:	2301      	movs	r3, #1
 8001912:	e000      	b.n	8001916 <xQueueGenericSend+0xaa>
 8001914:	2300      	movs	r3, #0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d10b      	bne.n	8001932 <xQueueGenericSend+0xc6>
	__asm volatile
 800191a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800191e:	f383 8811 	msr	BASEPRI, r3
 8001922:	f3bf 8f6f 	isb	sy
 8001926:	f3bf 8f4f 	dsb	sy
 800192a:	61fb      	str	r3, [r7, #28]
}
 800192c:	bf00      	nop
 800192e:	bf00      	nop
 8001930:	e7fd      	b.n	800192e <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001932:	f001 fecb 	bl	80036cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001938:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800193a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800193c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800193e:	429a      	cmp	r2, r3
 8001940:	d302      	bcc.n	8001948 <xQueueGenericSend+0xdc>
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	2b02      	cmp	r3, #2
 8001946:	d129      	bne.n	800199c <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	68b9      	ldr	r1, [r7, #8]
 800194c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800194e:	f000 fa0d 	bl	8001d6c <prvCopyDataToQueue>
 8001952:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001958:	2b00      	cmp	r3, #0
 800195a:	d010      	beq.n	800197e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800195c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800195e:	3324      	adds	r3, #36	@ 0x24
 8001960:	4618      	mov	r0, r3
 8001962:	f000 fff9 	bl	8002958 <xTaskRemoveFromEventList>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d013      	beq.n	8001994 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800196c:	4b3f      	ldr	r3, [pc, #252]	@ (8001a6c <xQueueGenericSend+0x200>)
 800196e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	f3bf 8f4f 	dsb	sy
 8001978:	f3bf 8f6f 	isb	sy
 800197c:	e00a      	b.n	8001994 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800197e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001980:	2b00      	cmp	r3, #0
 8001982:	d007      	beq.n	8001994 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001984:	4b39      	ldr	r3, [pc, #228]	@ (8001a6c <xQueueGenericSend+0x200>)
 8001986:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	f3bf 8f4f 	dsb	sy
 8001990:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001994:	f001 feca 	bl	800372c <vPortExitCritical>
				return pdPASS;
 8001998:	2301      	movs	r3, #1
 800199a:	e063      	b.n	8001a64 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d103      	bne.n	80019aa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80019a2:	f001 fec3 	bl	800372c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	e05c      	b.n	8001a64 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80019aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d106      	bne.n	80019be <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80019b0:	f107 0314 	add.w	r3, r7, #20
 80019b4:	4618      	mov	r0, r3
 80019b6:	f001 f833 	bl	8002a20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80019ba:	2301      	movs	r3, #1
 80019bc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80019be:	f001 feb5 	bl	800372c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80019c2:	f000 fd99 	bl	80024f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80019c6:	f001 fe81 	bl	80036cc <vPortEnterCritical>
 80019ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80019d0:	b25b      	sxtb	r3, r3
 80019d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d6:	d103      	bne.n	80019e0 <xQueueGenericSend+0x174>
 80019d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80019e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80019e6:	b25b      	sxtb	r3, r3
 80019e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ec:	d103      	bne.n	80019f6 <xQueueGenericSend+0x18a>
 80019ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80019f6:	f001 fe99 	bl	800372c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80019fa:	1d3a      	adds	r2, r7, #4
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	4611      	mov	r1, r2
 8001a02:	4618      	mov	r0, r3
 8001a04:	f001 f822 	bl	8002a4c <xTaskCheckForTimeOut>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d124      	bne.n	8001a58 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001a0e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001a10:	f000 faa4 	bl	8001f5c <prvIsQueueFull>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d018      	beq.n	8001a4c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a1c:	3310      	adds	r3, #16
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	4611      	mov	r1, r2
 8001a22:	4618      	mov	r0, r3
 8001a24:	f000 ff46 	bl	80028b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001a28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001a2a:	f000 fa2f 	bl	8001e8c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001a2e:	f000 fd71 	bl	8002514 <xTaskResumeAll>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f47f af7c 	bne.w	8001932 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a6c <xQueueGenericSend+0x200>)
 8001a3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	f3bf 8f4f 	dsb	sy
 8001a46:	f3bf 8f6f 	isb	sy
 8001a4a:	e772      	b.n	8001932 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001a4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001a4e:	f000 fa1d 	bl	8001e8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001a52:	f000 fd5f 	bl	8002514 <xTaskResumeAll>
 8001a56:	e76c      	b.n	8001932 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001a58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001a5a:	f000 fa17 	bl	8001e8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001a5e:	f000 fd59 	bl	8002514 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001a62:	2300      	movs	r3, #0
		}
	}
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3738      	adds	r7, #56	@ 0x38
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	e000ed04 	.word	0xe000ed04

08001a70 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08e      	sub	sp, #56	@ 0x38
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
 8001a7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8001a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d10b      	bne.n	8001aa0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8001a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a8c:	f383 8811 	msr	BASEPRI, r3
 8001a90:	f3bf 8f6f 	isb	sy
 8001a94:	f3bf 8f4f 	dsb	sy
 8001a98:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001a9a:	bf00      	nop
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d103      	bne.n	8001aae <xQueueGenericSendFromISR+0x3e>
 8001aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <xQueueGenericSendFromISR+0x42>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <xQueueGenericSendFromISR+0x44>
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d10b      	bne.n	8001ad0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8001ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001abc:	f383 8811 	msr	BASEPRI, r3
 8001ac0:	f3bf 8f6f 	isb	sy
 8001ac4:	f3bf 8f4f 	dsb	sy
 8001ac8:	623b      	str	r3, [r7, #32]
}
 8001aca:	bf00      	nop
 8001acc:	bf00      	nop
 8001ace:	e7fd      	b.n	8001acc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d103      	bne.n	8001ade <xQueueGenericSendFromISR+0x6e>
 8001ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d101      	bne.n	8001ae2 <xQueueGenericSendFromISR+0x72>
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e000      	b.n	8001ae4 <xQueueGenericSendFromISR+0x74>
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d10b      	bne.n	8001b00 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8001ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001aec:	f383 8811 	msr	BASEPRI, r3
 8001af0:	f3bf 8f6f 	isb	sy
 8001af4:	f3bf 8f4f 	dsb	sy
 8001af8:	61fb      	str	r3, [r7, #28]
}
 8001afa:	bf00      	nop
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001b00:	f001 fea6 	bl	8003850 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001b04:	f3ef 8211 	mrs	r2, BASEPRI
 8001b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b0c:	f383 8811 	msr	BASEPRI, r3
 8001b10:	f3bf 8f6f 	isb	sy
 8001b14:	f3bf 8f4f 	dsb	sy
 8001b18:	61ba      	str	r2, [r7, #24]
 8001b1a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001b1c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d302      	bcc.n	8001b32 <xQueueGenericSendFromISR+0xc2>
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d12c      	bne.n	8001b8c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001b38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	68b9      	ldr	r1, [r7, #8]
 8001b40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001b42:	f000 f913 	bl	8001d6c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001b46:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8001b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b4e:	d112      	bne.n	8001b76 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d016      	beq.n	8001b86 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b5a:	3324      	adds	r3, #36	@ 0x24
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f000 fefb 	bl	8002958 <xTaskRemoveFromEventList>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d00e      	beq.n	8001b86 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00b      	beq.n	8001b86 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2201      	movs	r2, #1
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	e007      	b.n	8001b86 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001b76:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	b25a      	sxtb	r2, r3
 8001b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8001b86:	2301      	movs	r3, #1
 8001b88:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8001b8a:	e001      	b.n	8001b90 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b92:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001b9a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3738      	adds	r7, #56	@ 0x38
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
	...

08001ba8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08c      	sub	sp, #48	@ 0x30
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d10b      	bne.n	8001bda <xQueueReceive+0x32>
	__asm volatile
 8001bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bc6:	f383 8811 	msr	BASEPRI, r3
 8001bca:	f3bf 8f6f 	isb	sy
 8001bce:	f3bf 8f4f 	dsb	sy
 8001bd2:	623b      	str	r3, [r7, #32]
}
 8001bd4:	bf00      	nop
 8001bd6:	bf00      	nop
 8001bd8:	e7fd      	b.n	8001bd6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d103      	bne.n	8001be8 <xQueueReceive+0x40>
 8001be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <xQueueReceive+0x44>
 8001be8:	2301      	movs	r3, #1
 8001bea:	e000      	b.n	8001bee <xQueueReceive+0x46>
 8001bec:	2300      	movs	r3, #0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10b      	bne.n	8001c0a <xQueueReceive+0x62>
	__asm volatile
 8001bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bf6:	f383 8811 	msr	BASEPRI, r3
 8001bfa:	f3bf 8f6f 	isb	sy
 8001bfe:	f3bf 8f4f 	dsb	sy
 8001c02:	61fb      	str	r3, [r7, #28]
}
 8001c04:	bf00      	nop
 8001c06:	bf00      	nop
 8001c08:	e7fd      	b.n	8001c06 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001c0a:	f001 f86f 	bl	8002cec <xTaskGetSchedulerState>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d102      	bne.n	8001c1a <xQueueReceive+0x72>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <xQueueReceive+0x76>
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <xQueueReceive+0x78>
 8001c1e:	2300      	movs	r3, #0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d10b      	bne.n	8001c3c <xQueueReceive+0x94>
	__asm volatile
 8001c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c28:	f383 8811 	msr	BASEPRI, r3
 8001c2c:	f3bf 8f6f 	isb	sy
 8001c30:	f3bf 8f4f 	dsb	sy
 8001c34:	61bb      	str	r3, [r7, #24]
}
 8001c36:	bf00      	nop
 8001c38:	bf00      	nop
 8001c3a:	e7fd      	b.n	8001c38 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001c3c:	f001 fd46 	bl	80036cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c44:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d01f      	beq.n	8001c8c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001c4c:	68b9      	ldr	r1, [r7, #8]
 8001c4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001c50:	f000 f8f6 	bl	8001e40 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c56:	1e5a      	subs	r2, r3, #1
 8001c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c5a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00f      	beq.n	8001c84 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c66:	3310      	adds	r3, #16
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f000 fe75 	bl	8002958 <xTaskRemoveFromEventList>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d007      	beq.n	8001c84 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001c74:	4b3c      	ldr	r3, [pc, #240]	@ (8001d68 <xQueueReceive+0x1c0>)
 8001c76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	f3bf 8f4f 	dsb	sy
 8001c80:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001c84:	f001 fd52 	bl	800372c <vPortExitCritical>
				return pdPASS;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e069      	b.n	8001d60 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d103      	bne.n	8001c9a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001c92:	f001 fd4b 	bl	800372c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001c96:	2300      	movs	r3, #0
 8001c98:	e062      	b.n	8001d60 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d106      	bne.n	8001cae <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001ca0:	f107 0310 	add.w	r3, r7, #16
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f000 febb 	bl	8002a20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001caa:	2301      	movs	r3, #1
 8001cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001cae:	f001 fd3d 	bl	800372c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001cb2:	f000 fc21 	bl	80024f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001cb6:	f001 fd09 	bl	80036cc <vPortEnterCritical>
 8001cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cbc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001cc0:	b25b      	sxtb	r3, r3
 8001cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc6:	d103      	bne.n	8001cd0 <xQueueReceive+0x128>
 8001cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cd2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001cd6:	b25b      	sxtb	r3, r3
 8001cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cdc:	d103      	bne.n	8001ce6 <xQueueReceive+0x13e>
 8001cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001ce6:	f001 fd21 	bl	800372c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001cea:	1d3a      	adds	r2, r7, #4
 8001cec:	f107 0310 	add.w	r3, r7, #16
 8001cf0:	4611      	mov	r1, r2
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f000 feaa 	bl	8002a4c <xTaskCheckForTimeOut>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d123      	bne.n	8001d46 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001cfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001d00:	f000 f916 	bl	8001f30 <prvIsQueueEmpty>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d017      	beq.n	8001d3a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d0c:	3324      	adds	r3, #36	@ 0x24
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	4611      	mov	r1, r2
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 fdce 	bl	80028b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001d18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001d1a:	f000 f8b7 	bl	8001e8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001d1e:	f000 fbf9 	bl	8002514 <xTaskResumeAll>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d189      	bne.n	8001c3c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8001d28:	4b0f      	ldr	r3, [pc, #60]	@ (8001d68 <xQueueReceive+0x1c0>)
 8001d2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	f3bf 8f4f 	dsb	sy
 8001d34:	f3bf 8f6f 	isb	sy
 8001d38:	e780      	b.n	8001c3c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001d3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001d3c:	f000 f8a6 	bl	8001e8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001d40:	f000 fbe8 	bl	8002514 <xTaskResumeAll>
 8001d44:	e77a      	b.n	8001c3c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001d46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001d48:	f000 f8a0 	bl	8001e8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001d4c:	f000 fbe2 	bl	8002514 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001d50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001d52:	f000 f8ed 	bl	8001f30 <prvIsQueueEmpty>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f43f af6f 	beq.w	8001c3c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001d5e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3730      	adds	r7, #48	@ 0x30
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	e000ed04 	.word	0xe000ed04

08001d6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10d      	bne.n	8001da6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d14d      	bne.n	8001e2e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 ffc6 	bl	8002d28 <xTaskPriorityDisinherit>
 8001d9c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	605a      	str	r2, [r3, #4]
 8001da4:	e043      	b.n	8001e2e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d119      	bne.n	8001de0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6898      	ldr	r0, [r3, #8]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db4:	461a      	mov	r2, r3
 8001db6:	68b9      	ldr	r1, [r7, #8]
 8001db8:	f001 ffec 	bl	8003d94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc4:	441a      	add	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	689a      	ldr	r2, [r3, #8]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d32b      	bcc.n	8001e2e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	609a      	str	r2, [r3, #8]
 8001dde:	e026      	b.n	8001e2e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	68d8      	ldr	r0, [r3, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de8:	461a      	mov	r2, r3
 8001dea:	68b9      	ldr	r1, [r7, #8]
 8001dec:	f001 ffd2 	bl	8003d94 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df8:	425b      	negs	r3, r3
 8001dfa:	441a      	add	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	68da      	ldr	r2, [r3, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d207      	bcs.n	8001e1c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e14:	425b      	negs	r3, r3
 8001e16:	441a      	add	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d105      	bne.n	8001e2e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d002      	beq.n	8001e2e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1c5a      	adds	r2, r3, #1
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8001e36:	697b      	ldr	r3, [r7, #20]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d018      	beq.n	8001e84 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5a:	441a      	add	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68da      	ldr	r2, [r3, #12]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d303      	bcc.n	8001e74 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68d9      	ldr	r1, [r3, #12]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	6838      	ldr	r0, [r7, #0]
 8001e80:	f001 ff88 	bl	8003d94 <memcpy>
	}
}
 8001e84:	bf00      	nop
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001e94:	f001 fc1a 	bl	80036cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001e9e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001ea0:	e011      	b.n	8001ec6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d012      	beq.n	8001ed0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3324      	adds	r3, #36	@ 0x24
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 fd52 	bl	8002958 <xTaskRemoveFromEventList>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001eba:	f000 fe2b 	bl	8002b14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	dce9      	bgt.n	8001ea2 <prvUnlockQueue+0x16>
 8001ece:	e000      	b.n	8001ed2 <prvUnlockQueue+0x46>
					break;
 8001ed0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	22ff      	movs	r2, #255	@ 0xff
 8001ed6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8001eda:	f001 fc27 	bl	800372c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001ede:	f001 fbf5 	bl	80036cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001ee8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001eea:	e011      	b.n	8001f10 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d012      	beq.n	8001f1a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3310      	adds	r3, #16
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f000 fd2d 	bl	8002958 <xTaskRemoveFromEventList>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001f04:	f000 fe06 	bl	8002b14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001f08:	7bbb      	ldrb	r3, [r7, #14]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001f10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	dce9      	bgt.n	8001eec <prvUnlockQueue+0x60>
 8001f18:	e000      	b.n	8001f1c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8001f1a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	22ff      	movs	r2, #255	@ 0xff
 8001f20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8001f24:	f001 fc02 	bl	800372c <vPortExitCritical>
}
 8001f28:	bf00      	nop
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001f38:	f001 fbc8 	bl	80036cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d102      	bne.n	8001f4a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001f44:	2301      	movs	r3, #1
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	e001      	b.n	8001f4e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001f4e:	f001 fbed 	bl	800372c <vPortExitCritical>

	return xReturn;
 8001f52:	68fb      	ldr	r3, [r7, #12]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001f64:	f001 fbb2 	bl	80036cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d102      	bne.n	8001f7a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001f74:	2301      	movs	r3, #1
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	e001      	b.n	8001f7e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001f7e:	f001 fbd5 	bl	800372c <vPortExitCritical>

	return xReturn;
 8001f82:	68fb      	ldr	r3, [r7, #12]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	e014      	b.n	8001fc6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001f9c:	4a0e      	ldr	r2, [pc, #56]	@ (8001fd8 <vQueueAddToRegistry+0x4c>)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d10b      	bne.n	8001fc0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001fa8:	490b      	ldr	r1, [pc, #44]	@ (8001fd8 <vQueueAddToRegistry+0x4c>)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001fb2:	4a09      	ldr	r2, [pc, #36]	@ (8001fd8 <vQueueAddToRegistry+0x4c>)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4413      	add	r3, r2
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001fbe:	e006      	b.n	8001fce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2b07      	cmp	r3, #7
 8001fca:	d9e7      	bls.n	8001f9c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001fcc:	bf00      	nop
 8001fce:	bf00      	nop
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr
 8001fd8:	200007e4 	.word	0x200007e4

08001fdc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001fec:	f001 fb6e 	bl	80036cc <vPortEnterCritical>
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001ff6:	b25b      	sxtb	r3, r3
 8001ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffc:	d103      	bne.n	8002006 <vQueueWaitForMessageRestricted+0x2a>
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800200c:	b25b      	sxtb	r3, r3
 800200e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002012:	d103      	bne.n	800201c <vQueueWaitForMessageRestricted+0x40>
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800201c:	f001 fb86 	bl	800372c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002024:	2b00      	cmp	r3, #0
 8002026:	d106      	bne.n	8002036 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	3324      	adds	r3, #36	@ 0x24
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	68b9      	ldr	r1, [r7, #8]
 8002030:	4618      	mov	r0, r3
 8002032:	f000 fc65 	bl	8002900 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002036:	6978      	ldr	r0, [r7, #20]
 8002038:	f7ff ff28 	bl	8001e8c <prvUnlockQueue>
	}
 800203c:	bf00      	nop
 800203e:	3718      	adds	r7, #24
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08e      	sub	sp, #56	@ 0x38
 8002048:	af04      	add	r7, sp, #16
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
 8002050:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10b      	bne.n	8002070 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800205c:	f383 8811 	msr	BASEPRI, r3
 8002060:	f3bf 8f6f 	isb	sy
 8002064:	f3bf 8f4f 	dsb	sy
 8002068:	623b      	str	r3, [r7, #32]
}
 800206a:	bf00      	nop
 800206c:	bf00      	nop
 800206e:	e7fd      	b.n	800206c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10b      	bne.n	800208e <xTaskCreateStatic+0x4a>
	__asm volatile
 8002076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800207a:	f383 8811 	msr	BASEPRI, r3
 800207e:	f3bf 8f6f 	isb	sy
 8002082:	f3bf 8f4f 	dsb	sy
 8002086:	61fb      	str	r3, [r7, #28]
}
 8002088:	bf00      	nop
 800208a:	bf00      	nop
 800208c:	e7fd      	b.n	800208a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800208e:	23a8      	movs	r3, #168	@ 0xa8
 8002090:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	2ba8      	cmp	r3, #168	@ 0xa8
 8002096:	d00b      	beq.n	80020b0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800209c:	f383 8811 	msr	BASEPRI, r3
 80020a0:	f3bf 8f6f 	isb	sy
 80020a4:	f3bf 8f4f 	dsb	sy
 80020a8:	61bb      	str	r3, [r7, #24]
}
 80020aa:	bf00      	nop
 80020ac:	bf00      	nop
 80020ae:	e7fd      	b.n	80020ac <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80020b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d01e      	beq.n	80020f4 <xTaskCreateStatic+0xb0>
 80020b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d01b      	beq.n	80020f4 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80020bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020be:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80020c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80020c4:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80020c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c8:	2202      	movs	r2, #2
 80020ca:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80020ce:	2300      	movs	r3, #0
 80020d0:	9303      	str	r3, [sp, #12]
 80020d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d4:	9302      	str	r3, [sp, #8]
 80020d6:	f107 0314 	add.w	r3, r7, #20
 80020da:	9301      	str	r3, [sp, #4]
 80020dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	68b9      	ldr	r1, [r7, #8]
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f000 f850 	bl	800218c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80020ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80020ee:	f000 f8ed 	bl	80022cc <prvAddNewTaskToReadyList>
 80020f2:	e001      	b.n	80020f8 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80020f8:	697b      	ldr	r3, [r7, #20]
	}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3728      	adds	r7, #40	@ 0x28
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002102:	b580      	push	{r7, lr}
 8002104:	b08c      	sub	sp, #48	@ 0x30
 8002106:	af04      	add	r7, sp, #16
 8002108:	60f8      	str	r0, [r7, #12]
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	603b      	str	r3, [r7, #0]
 800210e:	4613      	mov	r3, r2
 8002110:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002112:	88fb      	ldrh	r3, [r7, #6]
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4618      	mov	r0, r3
 8002118:	f001 fbda 	bl	80038d0 <pvPortMalloc>
 800211c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00e      	beq.n	8002142 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002124:	20a8      	movs	r0, #168	@ 0xa8
 8002126:	f001 fbd3 	bl	80038d0 <pvPortMalloc>
 800212a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	631a      	str	r2, [r3, #48]	@ 0x30
 8002138:	e005      	b.n	8002146 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800213a:	6978      	ldr	r0, [r7, #20]
 800213c:	f001 fc90 	bl	8003a60 <vPortFree>
 8002140:	e001      	b.n	8002146 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002142:	2300      	movs	r3, #0
 8002144:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d017      	beq.n	800217c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002154:	88fa      	ldrh	r2, [r7, #6]
 8002156:	2300      	movs	r3, #0
 8002158:	9303      	str	r3, [sp, #12]
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	9302      	str	r3, [sp, #8]
 800215e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002160:	9301      	str	r3, [sp, #4]
 8002162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	68b9      	ldr	r1, [r7, #8]
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f000 f80e 	bl	800218c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002170:	69f8      	ldr	r0, [r7, #28]
 8002172:	f000 f8ab 	bl	80022cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002176:	2301      	movs	r3, #1
 8002178:	61bb      	str	r3, [r7, #24]
 800217a:	e002      	b.n	8002182 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800217c:	f04f 33ff 	mov.w	r3, #4294967295
 8002180:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002182:	69bb      	ldr	r3, [r7, #24]
	}
 8002184:	4618      	mov	r0, r3
 8002186:	3720      	adds	r7, #32
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
 8002198:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800219a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800219c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	461a      	mov	r2, r3
 80021a4:	21a5      	movs	r1, #165	@ 0xa5
 80021a6:	f001 fd71 	bl	8003c8c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80021aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80021b4:	3b01      	subs	r3, #1
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	f023 0307 	bic.w	r3, r3, #7
 80021c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00b      	beq.n	80021e6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80021ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021d2:	f383 8811 	msr	BASEPRI, r3
 80021d6:	f3bf 8f6f 	isb	sy
 80021da:	f3bf 8f4f 	dsb	sy
 80021de:	617b      	str	r3, [r7, #20]
}
 80021e0:	bf00      	nop
 80021e2:	bf00      	nop
 80021e4:	e7fd      	b.n	80021e2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80021e6:	2300      	movs	r3, #0
 80021e8:	61fb      	str	r3, [r7, #28]
 80021ea:	e012      	b.n	8002212 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80021ec:	68ba      	ldr	r2, [r7, #8]
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	4413      	add	r3, r2
 80021f2:	7819      	ldrb	r1, [r3, #0]
 80021f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	4413      	add	r3, r2
 80021fa:	3334      	adds	r3, #52	@ 0x34
 80021fc:	460a      	mov	r2, r1
 80021fe:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002200:	68ba      	ldr	r2, [r7, #8]
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	4413      	add	r3, r2
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d006      	beq.n	800221a <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	3301      	adds	r3, #1
 8002210:	61fb      	str	r3, [r7, #28]
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	2b0f      	cmp	r3, #15
 8002216:	d9e9      	bls.n	80021ec <prvInitialiseNewTask+0x60>
 8002218:	e000      	b.n	800221c <prvInitialiseNewTask+0x90>
		{
			break;
 800221a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800221c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002226:	2b37      	cmp	r3, #55	@ 0x37
 8002228:	d901      	bls.n	800222e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800222a:	2337      	movs	r3, #55	@ 0x37
 800222c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800222e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002230:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002232:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002236:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002238:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800223a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800223c:	2200      	movs	r2, #0
 800223e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002242:	3304      	adds	r3, #4
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff f976 	bl	8001536 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800224a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800224c:	3318      	adds	r3, #24
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff f971 	bl	8001536 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002256:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002258:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800225a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800225c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002262:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002266:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002268:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800226a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800226c:	2200      	movs	r2, #0
 800226e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002274:	2200      	movs	r2, #0
 8002276:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800227a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800227c:	3354      	adds	r3, #84	@ 0x54
 800227e:	224c      	movs	r2, #76	@ 0x4c
 8002280:	2100      	movs	r1, #0
 8002282:	4618      	mov	r0, r3
 8002284:	f001 fd02 	bl	8003c8c <memset>
 8002288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800228a:	4a0d      	ldr	r2, [pc, #52]	@ (80022c0 <prvInitialiseNewTask+0x134>)
 800228c:	659a      	str	r2, [r3, #88]	@ 0x58
 800228e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002290:	4a0c      	ldr	r2, [pc, #48]	@ (80022c4 <prvInitialiseNewTask+0x138>)
 8002292:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002296:	4a0c      	ldr	r2, [pc, #48]	@ (80022c8 <prvInitialiseNewTask+0x13c>)
 8002298:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	68f9      	ldr	r1, [r7, #12]
 800229e:	69b8      	ldr	r0, [r7, #24]
 80022a0:	f001 f926 	bl	80034f0 <pxPortInitialiseStack>
 80022a4:	4602      	mov	r2, r0
 80022a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80022aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d002      	beq.n	80022b6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80022b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80022b6:	bf00      	nop
 80022b8:	3720      	adds	r7, #32
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	20001a70 	.word	0x20001a70
 80022c4:	20001ad8 	.word	0x20001ad8
 80022c8:	20001b40 	.word	0x20001b40

080022cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80022d4:	f001 f9fa 	bl	80036cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80022d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002390 <prvAddNewTaskToReadyList+0xc4>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	3301      	adds	r3, #1
 80022de:	4a2c      	ldr	r2, [pc, #176]	@ (8002390 <prvAddNewTaskToReadyList+0xc4>)
 80022e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80022e2:	4b2c      	ldr	r3, [pc, #176]	@ (8002394 <prvAddNewTaskToReadyList+0xc8>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d109      	bne.n	80022fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80022ea:	4a2a      	ldr	r2, [pc, #168]	@ (8002394 <prvAddNewTaskToReadyList+0xc8>)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80022f0:	4b27      	ldr	r3, [pc, #156]	@ (8002390 <prvAddNewTaskToReadyList+0xc4>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d110      	bne.n	800231a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80022f8:	f000 fc30 	bl	8002b5c <prvInitialiseTaskLists>
 80022fc:	e00d      	b.n	800231a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80022fe:	4b26      	ldr	r3, [pc, #152]	@ (8002398 <prvAddNewTaskToReadyList+0xcc>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d109      	bne.n	800231a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002306:	4b23      	ldr	r3, [pc, #140]	@ (8002394 <prvAddNewTaskToReadyList+0xc8>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002310:	429a      	cmp	r2, r3
 8002312:	d802      	bhi.n	800231a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002314:	4a1f      	ldr	r2, [pc, #124]	@ (8002394 <prvAddNewTaskToReadyList+0xc8>)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800231a:	4b20      	ldr	r3, [pc, #128]	@ (800239c <prvAddNewTaskToReadyList+0xd0>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	3301      	adds	r3, #1
 8002320:	4a1e      	ldr	r2, [pc, #120]	@ (800239c <prvAddNewTaskToReadyList+0xd0>)
 8002322:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002324:	4b1d      	ldr	r3, [pc, #116]	@ (800239c <prvAddNewTaskToReadyList+0xd0>)
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002330:	4b1b      	ldr	r3, [pc, #108]	@ (80023a0 <prvAddNewTaskToReadyList+0xd4>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d903      	bls.n	8002340 <prvAddNewTaskToReadyList+0x74>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800233c:	4a18      	ldr	r2, [pc, #96]	@ (80023a0 <prvAddNewTaskToReadyList+0xd4>)
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4a15      	ldr	r2, [pc, #84]	@ (80023a4 <prvAddNewTaskToReadyList+0xd8>)
 800234e:	441a      	add	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3304      	adds	r3, #4
 8002354:	4619      	mov	r1, r3
 8002356:	4610      	mov	r0, r2
 8002358:	f7ff f8f9 	bl	800154e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800235c:	f001 f9e6 	bl	800372c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002360:	4b0d      	ldr	r3, [pc, #52]	@ (8002398 <prvAddNewTaskToReadyList+0xcc>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00e      	beq.n	8002386 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002368:	4b0a      	ldr	r3, [pc, #40]	@ (8002394 <prvAddNewTaskToReadyList+0xc8>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002372:	429a      	cmp	r2, r3
 8002374:	d207      	bcs.n	8002386 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002376:	4b0c      	ldr	r3, [pc, #48]	@ (80023a8 <prvAddNewTaskToReadyList+0xdc>)
 8002378:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	f3bf 8f4f 	dsb	sy
 8002382:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20000cf8 	.word	0x20000cf8
 8002394:	20000824 	.word	0x20000824
 8002398:	20000d04 	.word	0x20000d04
 800239c:	20000d14 	.word	0x20000d14
 80023a0:	20000d00 	.word	0x20000d00
 80023a4:	20000828 	.word	0x20000828
 80023a8:	e000ed04 	.word	0xe000ed04

080023ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80023b4:	2300      	movs	r3, #0
 80023b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d018      	beq.n	80023f0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80023be:	4b14      	ldr	r3, [pc, #80]	@ (8002410 <vTaskDelay+0x64>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00b      	beq.n	80023de <vTaskDelay+0x32>
	__asm volatile
 80023c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023ca:	f383 8811 	msr	BASEPRI, r3
 80023ce:	f3bf 8f6f 	isb	sy
 80023d2:	f3bf 8f4f 	dsb	sy
 80023d6:	60bb      	str	r3, [r7, #8]
}
 80023d8:	bf00      	nop
 80023da:	bf00      	nop
 80023dc:	e7fd      	b.n	80023da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80023de:	f000 f88b 	bl	80024f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80023e2:	2100      	movs	r1, #0
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 fd0f 	bl	8002e08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80023ea:	f000 f893 	bl	8002514 <xTaskResumeAll>
 80023ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d107      	bne.n	8002406 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80023f6:	4b07      	ldr	r3, [pc, #28]	@ (8002414 <vTaskDelay+0x68>)
 80023f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	f3bf 8f4f 	dsb	sy
 8002402:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002406:	bf00      	nop
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000d20 	.word	0x20000d20
 8002414:	e000ed04 	.word	0xe000ed04

08002418 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b08a      	sub	sp, #40	@ 0x28
 800241c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800241e:	2300      	movs	r3, #0
 8002420:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002422:	2300      	movs	r3, #0
 8002424:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002426:	463a      	mov	r2, r7
 8002428:	1d39      	adds	r1, r7, #4
 800242a:	f107 0308 	add.w	r3, r7, #8
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff f830 	bl	8001494 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002434:	6839      	ldr	r1, [r7, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68ba      	ldr	r2, [r7, #8]
 800243a:	9202      	str	r2, [sp, #8]
 800243c:	9301      	str	r3, [sp, #4]
 800243e:	2300      	movs	r3, #0
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	2300      	movs	r3, #0
 8002444:	460a      	mov	r2, r1
 8002446:	4924      	ldr	r1, [pc, #144]	@ (80024d8 <vTaskStartScheduler+0xc0>)
 8002448:	4824      	ldr	r0, [pc, #144]	@ (80024dc <vTaskStartScheduler+0xc4>)
 800244a:	f7ff fdfb 	bl	8002044 <xTaskCreateStatic>
 800244e:	4603      	mov	r3, r0
 8002450:	4a23      	ldr	r2, [pc, #140]	@ (80024e0 <vTaskStartScheduler+0xc8>)
 8002452:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002454:	4b22      	ldr	r3, [pc, #136]	@ (80024e0 <vTaskStartScheduler+0xc8>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d002      	beq.n	8002462 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800245c:	2301      	movs	r3, #1
 800245e:	617b      	str	r3, [r7, #20]
 8002460:	e001      	b.n	8002466 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002462:	2300      	movs	r3, #0
 8002464:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d102      	bne.n	8002472 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800246c:	f000 fd20 	bl	8002eb0 <xTimerCreateTimerTask>
 8002470:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d11b      	bne.n	80024b0 <vTaskStartScheduler+0x98>
	__asm volatile
 8002478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800247c:	f383 8811 	msr	BASEPRI, r3
 8002480:	f3bf 8f6f 	isb	sy
 8002484:	f3bf 8f4f 	dsb	sy
 8002488:	613b      	str	r3, [r7, #16]
}
 800248a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800248c:	4b15      	ldr	r3, [pc, #84]	@ (80024e4 <vTaskStartScheduler+0xcc>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	3354      	adds	r3, #84	@ 0x54
 8002492:	4a15      	ldr	r2, [pc, #84]	@ (80024e8 <vTaskStartScheduler+0xd0>)
 8002494:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002496:	4b15      	ldr	r3, [pc, #84]	@ (80024ec <vTaskStartScheduler+0xd4>)
 8002498:	f04f 32ff 	mov.w	r2, #4294967295
 800249c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800249e:	4b14      	ldr	r3, [pc, #80]	@ (80024f0 <vTaskStartScheduler+0xd8>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80024a4:	4b13      	ldr	r3, [pc, #76]	@ (80024f4 <vTaskStartScheduler+0xdc>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80024aa:	f001 f89d 	bl	80035e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80024ae:	e00f      	b.n	80024d0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b6:	d10b      	bne.n	80024d0 <vTaskStartScheduler+0xb8>
	__asm volatile
 80024b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024bc:	f383 8811 	msr	BASEPRI, r3
 80024c0:	f3bf 8f6f 	isb	sy
 80024c4:	f3bf 8f4f 	dsb	sy
 80024c8:	60fb      	str	r3, [r7, #12]
}
 80024ca:	bf00      	nop
 80024cc:	bf00      	nop
 80024ce:	e7fd      	b.n	80024cc <vTaskStartScheduler+0xb4>
}
 80024d0:	bf00      	nop
 80024d2:	3718      	adds	r7, #24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	08003e98 	.word	0x08003e98
 80024dc:	08002b2d 	.word	0x08002b2d
 80024e0:	20000d1c 	.word	0x20000d1c
 80024e4:	20000824 	.word	0x20000824
 80024e8:	20000014 	.word	0x20000014
 80024ec:	20000d18 	.word	0x20000d18
 80024f0:	20000d04 	.word	0x20000d04
 80024f4:	20000cfc 	.word	0x20000cfc

080024f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80024fc:	4b04      	ldr	r3, [pc, #16]	@ (8002510 <vTaskSuspendAll+0x18>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	3301      	adds	r3, #1
 8002502:	4a03      	ldr	r2, [pc, #12]	@ (8002510 <vTaskSuspendAll+0x18>)
 8002504:	6013      	str	r3, [r2, #0]
}
 8002506:	bf00      	nop
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	20000d20 	.word	0x20000d20

08002514 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800251a:	2300      	movs	r3, #0
 800251c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800251e:	2300      	movs	r3, #0
 8002520:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002522:	4b42      	ldr	r3, [pc, #264]	@ (800262c <xTaskResumeAll+0x118>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10b      	bne.n	8002542 <xTaskResumeAll+0x2e>
	__asm volatile
 800252a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800252e:	f383 8811 	msr	BASEPRI, r3
 8002532:	f3bf 8f6f 	isb	sy
 8002536:	f3bf 8f4f 	dsb	sy
 800253a:	603b      	str	r3, [r7, #0]
}
 800253c:	bf00      	nop
 800253e:	bf00      	nop
 8002540:	e7fd      	b.n	800253e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002542:	f001 f8c3 	bl	80036cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002546:	4b39      	ldr	r3, [pc, #228]	@ (800262c <xTaskResumeAll+0x118>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	3b01      	subs	r3, #1
 800254c:	4a37      	ldr	r2, [pc, #220]	@ (800262c <xTaskResumeAll+0x118>)
 800254e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002550:	4b36      	ldr	r3, [pc, #216]	@ (800262c <xTaskResumeAll+0x118>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d162      	bne.n	800261e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002558:	4b35      	ldr	r3, [pc, #212]	@ (8002630 <xTaskResumeAll+0x11c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d05e      	beq.n	800261e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002560:	e02f      	b.n	80025c2 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002562:	4b34      	ldr	r3, [pc, #208]	@ (8002634 <xTaskResumeAll+0x120>)
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	3318      	adds	r3, #24
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff f848 	bl	8001604 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	3304      	adds	r3, #4
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff f843 	bl	8001604 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002582:	4b2d      	ldr	r3, [pc, #180]	@ (8002638 <xTaskResumeAll+0x124>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d903      	bls.n	8002592 <xTaskResumeAll+0x7e>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800258e:	4a2a      	ldr	r2, [pc, #168]	@ (8002638 <xTaskResumeAll+0x124>)
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002596:	4613      	mov	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4a27      	ldr	r2, [pc, #156]	@ (800263c <xTaskResumeAll+0x128>)
 80025a0:	441a      	add	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	3304      	adds	r3, #4
 80025a6:	4619      	mov	r1, r3
 80025a8:	4610      	mov	r0, r2
 80025aa:	f7fe ffd0 	bl	800154e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025b2:	4b23      	ldr	r3, [pc, #140]	@ (8002640 <xTaskResumeAll+0x12c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d302      	bcc.n	80025c2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80025bc:	4b21      	ldr	r3, [pc, #132]	@ (8002644 <xTaskResumeAll+0x130>)
 80025be:	2201      	movs	r2, #1
 80025c0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80025c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002634 <xTaskResumeAll+0x120>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1cb      	bne.n	8002562 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80025d0:	f000 fb68 	bl	8002ca4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80025d4:	4b1c      	ldr	r3, [pc, #112]	@ (8002648 <xTaskResumeAll+0x134>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d010      	beq.n	8002602 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80025e0:	f000 f844 	bl	800266c <xTaskIncrementTick>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d002      	beq.n	80025f0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80025ea:	4b16      	ldr	r3, [pc, #88]	@ (8002644 <xTaskResumeAll+0x130>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3b01      	subs	r3, #1
 80025f4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1f1      	bne.n	80025e0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80025fc:	4b12      	ldr	r3, [pc, #72]	@ (8002648 <xTaskResumeAll+0x134>)
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002602:	4b10      	ldr	r3, [pc, #64]	@ (8002644 <xTaskResumeAll+0x130>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d009      	beq.n	800261e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800260a:	2301      	movs	r3, #1
 800260c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800260e:	4b0f      	ldr	r3, [pc, #60]	@ (800264c <xTaskResumeAll+0x138>)
 8002610:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	f3bf 8f4f 	dsb	sy
 800261a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800261e:	f001 f885 	bl	800372c <vPortExitCritical>

	return xAlreadyYielded;
 8002622:	68bb      	ldr	r3, [r7, #8]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	20000d20 	.word	0x20000d20
 8002630:	20000cf8 	.word	0x20000cf8
 8002634:	20000cb8 	.word	0x20000cb8
 8002638:	20000d00 	.word	0x20000d00
 800263c:	20000828 	.word	0x20000828
 8002640:	20000824 	.word	0x20000824
 8002644:	20000d0c 	.word	0x20000d0c
 8002648:	20000d08 	.word	0x20000d08
 800264c:	e000ed04 	.word	0xe000ed04

08002650 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002656:	4b04      	ldr	r3, [pc, #16]	@ (8002668 <xTaskGetTickCount+0x18>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800265c:	687b      	ldr	r3, [r7, #4]
}
 800265e:	4618      	mov	r0, r3
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	bc80      	pop	{r7}
 8002666:	4770      	bx	lr
 8002668:	20000cfc 	.word	0x20000cfc

0800266c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002672:	2300      	movs	r3, #0
 8002674:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002676:	4b52      	ldr	r3, [pc, #328]	@ (80027c0 <xTaskIncrementTick+0x154>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	f040 808f 	bne.w	800279e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002680:	4b50      	ldr	r3, [pc, #320]	@ (80027c4 <xTaskIncrementTick+0x158>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	3301      	adds	r3, #1
 8002686:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002688:	4a4e      	ldr	r2, [pc, #312]	@ (80027c4 <xTaskIncrementTick+0x158>)
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d121      	bne.n	80026d8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002694:	4b4c      	ldr	r3, [pc, #304]	@ (80027c8 <xTaskIncrementTick+0x15c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00b      	beq.n	80026b6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800269e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026a2:	f383 8811 	msr	BASEPRI, r3
 80026a6:	f3bf 8f6f 	isb	sy
 80026aa:	f3bf 8f4f 	dsb	sy
 80026ae:	603b      	str	r3, [r7, #0]
}
 80026b0:	bf00      	nop
 80026b2:	bf00      	nop
 80026b4:	e7fd      	b.n	80026b2 <xTaskIncrementTick+0x46>
 80026b6:	4b44      	ldr	r3, [pc, #272]	@ (80027c8 <xTaskIncrementTick+0x15c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	4b43      	ldr	r3, [pc, #268]	@ (80027cc <xTaskIncrementTick+0x160>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a41      	ldr	r2, [pc, #260]	@ (80027c8 <xTaskIncrementTick+0x15c>)
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	4a41      	ldr	r2, [pc, #260]	@ (80027cc <xTaskIncrementTick+0x160>)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	4b41      	ldr	r3, [pc, #260]	@ (80027d0 <xTaskIncrementTick+0x164>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	3301      	adds	r3, #1
 80026d0:	4a3f      	ldr	r2, [pc, #252]	@ (80027d0 <xTaskIncrementTick+0x164>)
 80026d2:	6013      	str	r3, [r2, #0]
 80026d4:	f000 fae6 	bl	8002ca4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80026d8:	4b3e      	ldr	r3, [pc, #248]	@ (80027d4 <xTaskIncrementTick+0x168>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d34e      	bcc.n	8002780 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026e2:	4b39      	ldr	r3, [pc, #228]	@ (80027c8 <xTaskIncrementTick+0x15c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <xTaskIncrementTick+0x84>
 80026ec:	2301      	movs	r3, #1
 80026ee:	e000      	b.n	80026f2 <xTaskIncrementTick+0x86>
 80026f0:	2300      	movs	r3, #0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d004      	beq.n	8002700 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026f6:	4b37      	ldr	r3, [pc, #220]	@ (80027d4 <xTaskIncrementTick+0x168>)
 80026f8:	f04f 32ff 	mov.w	r2, #4294967295
 80026fc:	601a      	str	r2, [r3, #0]
					break;
 80026fe:	e03f      	b.n	8002780 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002700:	4b31      	ldr	r3, [pc, #196]	@ (80027c8 <xTaskIncrementTick+0x15c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	429a      	cmp	r2, r3
 8002716:	d203      	bcs.n	8002720 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002718:	4a2e      	ldr	r2, [pc, #184]	@ (80027d4 <xTaskIncrementTick+0x168>)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6013      	str	r3, [r2, #0]
						break;
 800271e:	e02f      	b.n	8002780 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	3304      	adds	r3, #4
 8002724:	4618      	mov	r0, r3
 8002726:	f7fe ff6d 	bl	8001604 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800272e:	2b00      	cmp	r3, #0
 8002730:	d004      	beq.n	800273c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	3318      	adds	r3, #24
 8002736:	4618      	mov	r0, r3
 8002738:	f7fe ff64 	bl	8001604 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002740:	4b25      	ldr	r3, [pc, #148]	@ (80027d8 <xTaskIncrementTick+0x16c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d903      	bls.n	8002750 <xTaskIncrementTick+0xe4>
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800274c:	4a22      	ldr	r2, [pc, #136]	@ (80027d8 <xTaskIncrementTick+0x16c>)
 800274e:	6013      	str	r3, [r2, #0]
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002754:	4613      	mov	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4a1f      	ldr	r2, [pc, #124]	@ (80027dc <xTaskIncrementTick+0x170>)
 800275e:	441a      	add	r2, r3
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	3304      	adds	r3, #4
 8002764:	4619      	mov	r1, r3
 8002766:	4610      	mov	r0, r2
 8002768:	f7fe fef1 	bl	800154e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002770:	4b1b      	ldr	r3, [pc, #108]	@ (80027e0 <xTaskIncrementTick+0x174>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002776:	429a      	cmp	r2, r3
 8002778:	d3b3      	bcc.n	80026e2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800277a:	2301      	movs	r3, #1
 800277c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800277e:	e7b0      	b.n	80026e2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002780:	4b17      	ldr	r3, [pc, #92]	@ (80027e0 <xTaskIncrementTick+0x174>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002786:	4915      	ldr	r1, [pc, #84]	@ (80027dc <xTaskIncrementTick+0x170>)
 8002788:	4613      	mov	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d907      	bls.n	80027a8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002798:	2301      	movs	r3, #1
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	e004      	b.n	80027a8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800279e:	4b11      	ldr	r3, [pc, #68]	@ (80027e4 <xTaskIncrementTick+0x178>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	3301      	adds	r3, #1
 80027a4:	4a0f      	ldr	r2, [pc, #60]	@ (80027e4 <xTaskIncrementTick+0x178>)
 80027a6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80027a8:	4b0f      	ldr	r3, [pc, #60]	@ (80027e8 <xTaskIncrementTick+0x17c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 80027b0:	2301      	movs	r3, #1
 80027b2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80027b4:	697b      	ldr	r3, [r7, #20]
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	20000d20 	.word	0x20000d20
 80027c4:	20000cfc 	.word	0x20000cfc
 80027c8:	20000cb0 	.word	0x20000cb0
 80027cc:	20000cb4 	.word	0x20000cb4
 80027d0:	20000d10 	.word	0x20000d10
 80027d4:	20000d18 	.word	0x20000d18
 80027d8:	20000d00 	.word	0x20000d00
 80027dc:	20000828 	.word	0x20000828
 80027e0:	20000824 	.word	0x20000824
 80027e4:	20000d08 	.word	0x20000d08
 80027e8:	20000d0c 	.word	0x20000d0c

080027ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80027f2:	4b2a      	ldr	r3, [pc, #168]	@ (800289c <vTaskSwitchContext+0xb0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80027fa:	4b29      	ldr	r3, [pc, #164]	@ (80028a0 <vTaskSwitchContext+0xb4>)
 80027fc:	2201      	movs	r2, #1
 80027fe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002800:	e047      	b.n	8002892 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8002802:	4b27      	ldr	r3, [pc, #156]	@ (80028a0 <vTaskSwitchContext+0xb4>)
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002808:	4b26      	ldr	r3, [pc, #152]	@ (80028a4 <vTaskSwitchContext+0xb8>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	e011      	b.n	8002834 <vTaskSwitchContext+0x48>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10b      	bne.n	800282e <vTaskSwitchContext+0x42>
	__asm volatile
 8002816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800281a:	f383 8811 	msr	BASEPRI, r3
 800281e:	f3bf 8f6f 	isb	sy
 8002822:	f3bf 8f4f 	dsb	sy
 8002826:	607b      	str	r3, [r7, #4]
}
 8002828:	bf00      	nop
 800282a:	bf00      	nop
 800282c:	e7fd      	b.n	800282a <vTaskSwitchContext+0x3e>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	3b01      	subs	r3, #1
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	491c      	ldr	r1, [pc, #112]	@ (80028a8 <vTaskSwitchContext+0xbc>)
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	4613      	mov	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	440b      	add	r3, r1
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0e3      	beq.n	8002810 <vTaskSwitchContext+0x24>
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	4613      	mov	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4a15      	ldr	r2, [pc, #84]	@ (80028a8 <vTaskSwitchContext+0xbc>)
 8002854:	4413      	add	r3, r2
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	3308      	adds	r3, #8
 800286a:	429a      	cmp	r2, r3
 800286c:	d104      	bne.n	8002878 <vTaskSwitchContext+0x8c>
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	605a      	str	r2, [r3, #4]
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	4a0b      	ldr	r2, [pc, #44]	@ (80028ac <vTaskSwitchContext+0xc0>)
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	4a08      	ldr	r2, [pc, #32]	@ (80028a4 <vTaskSwitchContext+0xb8>)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002888:	4b08      	ldr	r3, [pc, #32]	@ (80028ac <vTaskSwitchContext+0xc0>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	3354      	adds	r3, #84	@ 0x54
 800288e:	4a08      	ldr	r2, [pc, #32]	@ (80028b0 <vTaskSwitchContext+0xc4>)
 8002890:	6013      	str	r3, [r2, #0]
}
 8002892:	bf00      	nop
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr
 800289c:	20000d20 	.word	0x20000d20
 80028a0:	20000d0c 	.word	0x20000d0c
 80028a4:	20000d00 	.word	0x20000d00
 80028a8:	20000828 	.word	0x20000828
 80028ac:	20000824 	.word	0x20000824
 80028b0:	20000014 	.word	0x20000014

080028b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10b      	bne.n	80028dc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80028c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028c8:	f383 8811 	msr	BASEPRI, r3
 80028cc:	f3bf 8f6f 	isb	sy
 80028d0:	f3bf 8f4f 	dsb	sy
 80028d4:	60fb      	str	r3, [r7, #12]
}
 80028d6:	bf00      	nop
 80028d8:	bf00      	nop
 80028da:	e7fd      	b.n	80028d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80028dc:	4b07      	ldr	r3, [pc, #28]	@ (80028fc <vTaskPlaceOnEventList+0x48>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	3318      	adds	r3, #24
 80028e2:	4619      	mov	r1, r3
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f7fe fe55 	bl	8001594 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80028ea:	2101      	movs	r1, #1
 80028ec:	6838      	ldr	r0, [r7, #0]
 80028ee:	f000 fa8b 	bl	8002e08 <prvAddCurrentTaskToDelayedList>
}
 80028f2:	bf00      	nop
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20000824 	.word	0x20000824

08002900 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10b      	bne.n	800292a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8002912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002916:	f383 8811 	msr	BASEPRI, r3
 800291a:	f3bf 8f6f 	isb	sy
 800291e:	f3bf 8f4f 	dsb	sy
 8002922:	617b      	str	r3, [r7, #20]
}
 8002924:	bf00      	nop
 8002926:	bf00      	nop
 8002928:	e7fd      	b.n	8002926 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800292a:	4b0a      	ldr	r3, [pc, #40]	@ (8002954 <vTaskPlaceOnEventListRestricted+0x54>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	3318      	adds	r3, #24
 8002930:	4619      	mov	r1, r3
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f7fe fe0b 	bl	800154e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d002      	beq.n	8002944 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800293e:	f04f 33ff 	mov.w	r3, #4294967295
 8002942:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	68b8      	ldr	r0, [r7, #8]
 8002948:	f000 fa5e 	bl	8002e08 <prvAddCurrentTaskToDelayedList>
	}
 800294c:	bf00      	nop
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	20000824 	.word	0x20000824

08002958 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10b      	bne.n	8002986 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800296e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002972:	f383 8811 	msr	BASEPRI, r3
 8002976:	f3bf 8f6f 	isb	sy
 800297a:	f3bf 8f4f 	dsb	sy
 800297e:	60fb      	str	r3, [r7, #12]
}
 8002980:	bf00      	nop
 8002982:	bf00      	nop
 8002984:	e7fd      	b.n	8002982 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	3318      	adds	r3, #24
 800298a:	4618      	mov	r0, r3
 800298c:	f7fe fe3a 	bl	8001604 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002990:	4b1d      	ldr	r3, [pc, #116]	@ (8002a08 <xTaskRemoveFromEventList+0xb0>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d11d      	bne.n	80029d4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	3304      	adds	r3, #4
 800299c:	4618      	mov	r0, r3
 800299e:	f7fe fe31 	bl	8001604 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029a6:	4b19      	ldr	r3, [pc, #100]	@ (8002a0c <xTaskRemoveFromEventList+0xb4>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d903      	bls.n	80029b6 <xTaskRemoveFromEventList+0x5e>
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b2:	4a16      	ldr	r2, [pc, #88]	@ (8002a0c <xTaskRemoveFromEventList+0xb4>)
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029ba:	4613      	mov	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4a13      	ldr	r2, [pc, #76]	@ (8002a10 <xTaskRemoveFromEventList+0xb8>)
 80029c4:	441a      	add	r2, r3
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	3304      	adds	r3, #4
 80029ca:	4619      	mov	r1, r3
 80029cc:	4610      	mov	r0, r2
 80029ce:	f7fe fdbe 	bl	800154e <vListInsertEnd>
 80029d2:	e005      	b.n	80029e0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	3318      	adds	r3, #24
 80029d8:	4619      	mov	r1, r3
 80029da:	480e      	ldr	r0, [pc, #56]	@ (8002a14 <xTaskRemoveFromEventList+0xbc>)
 80029dc:	f7fe fdb7 	bl	800154e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002a18 <xTaskRemoveFromEventList+0xc0>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d905      	bls.n	80029fa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80029ee:	2301      	movs	r3, #1
 80029f0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80029f2:	4b0a      	ldr	r3, [pc, #40]	@ (8002a1c <xTaskRemoveFromEventList+0xc4>)
 80029f4:	2201      	movs	r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	e001      	b.n	80029fe <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80029fa:	2300      	movs	r3, #0
 80029fc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80029fe:	697b      	ldr	r3, [r7, #20]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	20000d20 	.word	0x20000d20
 8002a0c:	20000d00 	.word	0x20000d00
 8002a10:	20000828 	.word	0x20000828
 8002a14:	20000cb8 	.word	0x20000cb8
 8002a18:	20000824 	.word	0x20000824
 8002a1c:	20000d0c 	.word	0x20000d0c

08002a20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002a28:	4b06      	ldr	r3, [pc, #24]	@ (8002a44 <vTaskInternalSetTimeOutState+0x24>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002a30:	4b05      	ldr	r3, [pc, #20]	@ (8002a48 <vTaskInternalSetTimeOutState+0x28>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	605a      	str	r2, [r3, #4]
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc80      	pop	{r7}
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	20000d10 	.word	0x20000d10
 8002a48:	20000cfc 	.word	0x20000cfc

08002a4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b088      	sub	sp, #32
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10b      	bne.n	8002a74 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8002a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a60:	f383 8811 	msr	BASEPRI, r3
 8002a64:	f3bf 8f6f 	isb	sy
 8002a68:	f3bf 8f4f 	dsb	sy
 8002a6c:	613b      	str	r3, [r7, #16]
}
 8002a6e:	bf00      	nop
 8002a70:	bf00      	nop
 8002a72:	e7fd      	b.n	8002a70 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10b      	bne.n	8002a92 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8002a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a7e:	f383 8811 	msr	BASEPRI, r3
 8002a82:	f3bf 8f6f 	isb	sy
 8002a86:	f3bf 8f4f 	dsb	sy
 8002a8a:	60fb      	str	r3, [r7, #12]
}
 8002a8c:	bf00      	nop
 8002a8e:	bf00      	nop
 8002a90:	e7fd      	b.n	8002a8e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8002a92:	f000 fe1b 	bl	80036cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002a96:	4b1d      	ldr	r3, [pc, #116]	@ (8002b0c <xTaskCheckForTimeOut+0xc0>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aae:	d102      	bne.n	8002ab6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61fb      	str	r3, [r7, #28]
 8002ab4:	e023      	b.n	8002afe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	4b15      	ldr	r3, [pc, #84]	@ (8002b10 <xTaskCheckForTimeOut+0xc4>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d007      	beq.n	8002ad2 <xTaskCheckForTimeOut+0x86>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d302      	bcc.n	8002ad2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002acc:	2301      	movs	r3, #1
 8002ace:	61fb      	str	r3, [r7, #28]
 8002ad0:	e015      	b.n	8002afe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d20b      	bcs.n	8002af4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	1ad2      	subs	r2, r2, r3
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f7ff ff99 	bl	8002a20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61fb      	str	r3, [r7, #28]
 8002af2:	e004      	b.n	8002afe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002afa:	2301      	movs	r3, #1
 8002afc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002afe:	f000 fe15 	bl	800372c <vPortExitCritical>

	return xReturn;
 8002b02:	69fb      	ldr	r3, [r7, #28]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3720      	adds	r7, #32
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	20000cfc 	.word	0x20000cfc
 8002b10:	20000d10 	.word	0x20000d10

08002b14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002b18:	4b03      	ldr	r3, [pc, #12]	@ (8002b28 <vTaskMissedYield+0x14>)
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]
}
 8002b1e:	bf00      	nop
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	20000d0c 	.word	0x20000d0c

08002b2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002b34:	f000 f852 	bl	8002bdc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002b38:	4b06      	ldr	r3, [pc, #24]	@ (8002b54 <prvIdleTask+0x28>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d9f9      	bls.n	8002b34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002b40:	4b05      	ldr	r3, [pc, #20]	@ (8002b58 <prvIdleTask+0x2c>)
 8002b42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	f3bf 8f4f 	dsb	sy
 8002b4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002b50:	e7f0      	b.n	8002b34 <prvIdleTask+0x8>
 8002b52:	bf00      	nop
 8002b54:	20000828 	.word	0x20000828
 8002b58:	e000ed04 	.word	0xe000ed04

08002b5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b62:	2300      	movs	r3, #0
 8002b64:	607b      	str	r3, [r7, #4]
 8002b66:	e00c      	b.n	8002b82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4413      	add	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4a12      	ldr	r2, [pc, #72]	@ (8002bbc <prvInitialiseTaskLists+0x60>)
 8002b74:	4413      	add	r3, r2
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe fcbe 	bl	80014f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	607b      	str	r3, [r7, #4]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b37      	cmp	r3, #55	@ 0x37
 8002b86:	d9ef      	bls.n	8002b68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002b88:	480d      	ldr	r0, [pc, #52]	@ (8002bc0 <prvInitialiseTaskLists+0x64>)
 8002b8a:	f7fe fcb5 	bl	80014f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002b8e:	480d      	ldr	r0, [pc, #52]	@ (8002bc4 <prvInitialiseTaskLists+0x68>)
 8002b90:	f7fe fcb2 	bl	80014f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002b94:	480c      	ldr	r0, [pc, #48]	@ (8002bc8 <prvInitialiseTaskLists+0x6c>)
 8002b96:	f7fe fcaf 	bl	80014f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002b9a:	480c      	ldr	r0, [pc, #48]	@ (8002bcc <prvInitialiseTaskLists+0x70>)
 8002b9c:	f7fe fcac 	bl	80014f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002ba0:	480b      	ldr	r0, [pc, #44]	@ (8002bd0 <prvInitialiseTaskLists+0x74>)
 8002ba2:	f7fe fca9 	bl	80014f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd4 <prvInitialiseTaskLists+0x78>)
 8002ba8:	4a05      	ldr	r2, [pc, #20]	@ (8002bc0 <prvInitialiseTaskLists+0x64>)
 8002baa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002bac:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd8 <prvInitialiseTaskLists+0x7c>)
 8002bae:	4a05      	ldr	r2, [pc, #20]	@ (8002bc4 <prvInitialiseTaskLists+0x68>)
 8002bb0:	601a      	str	r2, [r3, #0]
}
 8002bb2:	bf00      	nop
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20000828 	.word	0x20000828
 8002bc0:	20000c88 	.word	0x20000c88
 8002bc4:	20000c9c 	.word	0x20000c9c
 8002bc8:	20000cb8 	.word	0x20000cb8
 8002bcc:	20000ccc 	.word	0x20000ccc
 8002bd0:	20000ce4 	.word	0x20000ce4
 8002bd4:	20000cb0 	.word	0x20000cb0
 8002bd8:	20000cb4 	.word	0x20000cb4

08002bdc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002be2:	e019      	b.n	8002c18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002be4:	f000 fd72 	bl	80036cc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002be8:	4b10      	ldr	r3, [pc, #64]	@ (8002c2c <prvCheckTasksWaitingTermination+0x50>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7fe fd05 	bl	8001604 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8002c30 <prvCheckTasksWaitingTermination+0x54>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	4a0b      	ldr	r2, [pc, #44]	@ (8002c30 <prvCheckTasksWaitingTermination+0x54>)
 8002c02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002c04:	4b0b      	ldr	r3, [pc, #44]	@ (8002c34 <prvCheckTasksWaitingTermination+0x58>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c34 <prvCheckTasksWaitingTermination+0x58>)
 8002c0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002c0e:	f000 fd8d 	bl	800372c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f810 	bl	8002c38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c18:	4b06      	ldr	r3, [pc, #24]	@ (8002c34 <prvCheckTasksWaitingTermination+0x58>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1e1      	bne.n	8002be4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002c20:	bf00      	nop
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	20000ccc 	.word	0x20000ccc
 8002c30:	20000cf8 	.word	0x20000cf8
 8002c34:	20000ce0 	.word	0x20000ce0

08002c38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3354      	adds	r3, #84	@ 0x54
 8002c44:	4618      	mov	r0, r3
 8002c46:	f001 f829 	bl	8003c9c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d108      	bne.n	8002c66 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f000 ff01 	bl	8003a60 <vPortFree>
				vPortFree( pxTCB );
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 fefe 	bl	8003a60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002c64:	e019      	b.n	8002c9a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d103      	bne.n	8002c78 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 fef5 	bl	8003a60 <vPortFree>
	}
 8002c76:	e010      	b.n	8002c9a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d00b      	beq.n	8002c9a <prvDeleteTCB+0x62>
	__asm volatile
 8002c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c86:	f383 8811 	msr	BASEPRI, r3
 8002c8a:	f3bf 8f6f 	isb	sy
 8002c8e:	f3bf 8f4f 	dsb	sy
 8002c92:	60fb      	str	r3, [r7, #12]
}
 8002c94:	bf00      	nop
 8002c96:	bf00      	nop
 8002c98:	e7fd      	b.n	8002c96 <prvDeleteTCB+0x5e>
	}
 8002c9a:	bf00      	nop
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002caa:	4b0e      	ldr	r3, [pc, #56]	@ (8002ce4 <prvResetNextTaskUnblockTime+0x40>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <prvResetNextTaskUnblockTime+0x14>
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e000      	b.n	8002cba <prvResetNextTaskUnblockTime+0x16>
 8002cb8:	2300      	movs	r3, #0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d004      	beq.n	8002cc8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce8 <prvResetNextTaskUnblockTime+0x44>)
 8002cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002cc6:	e008      	b.n	8002cda <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002cc8:	4b06      	ldr	r3, [pc, #24]	@ (8002ce4 <prvResetNextTaskUnblockTime+0x40>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	4a04      	ldr	r2, [pc, #16]	@ (8002ce8 <prvResetNextTaskUnblockTime+0x44>)
 8002cd8:	6013      	str	r3, [r2, #0]
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr
 8002ce4:	20000cb0 	.word	0x20000cb0
 8002ce8:	20000d18 	.word	0x20000d18

08002cec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8002d20 <xTaskGetSchedulerState+0x34>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d102      	bne.n	8002d00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	607b      	str	r3, [r7, #4]
 8002cfe:	e008      	b.n	8002d12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d00:	4b08      	ldr	r3, [pc, #32]	@ (8002d24 <xTaskGetSchedulerState+0x38>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d102      	bne.n	8002d0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	607b      	str	r3, [r7, #4]
 8002d0c:	e001      	b.n	8002d12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002d12:	687b      	ldr	r3, [r7, #4]
	}
 8002d14:	4618      	mov	r0, r3
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	20000d04 	.word	0x20000d04
 8002d24:	20000d20 	.word	0x20000d20

08002d28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d058      	beq.n	8002df0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002d3e:	4b2f      	ldr	r3, [pc, #188]	@ (8002dfc <xTaskPriorityDisinherit+0xd4>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d00b      	beq.n	8002d60 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8002d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d4c:	f383 8811 	msr	BASEPRI, r3
 8002d50:	f3bf 8f6f 	isb	sy
 8002d54:	f3bf 8f4f 	dsb	sy
 8002d58:	60fb      	str	r3, [r7, #12]
}
 8002d5a:	bf00      	nop
 8002d5c:	bf00      	nop
 8002d5e:	e7fd      	b.n	8002d5c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10b      	bne.n	8002d80 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8002d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d6c:	f383 8811 	msr	BASEPRI, r3
 8002d70:	f3bf 8f6f 	isb	sy
 8002d74:	f3bf 8f4f 	dsb	sy
 8002d78:	60bb      	str	r3, [r7, #8]
}
 8002d7a:	bf00      	nop
 8002d7c:	bf00      	nop
 8002d7e:	e7fd      	b.n	8002d7c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d84:	1e5a      	subs	r2, r3, #1
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d02c      	beq.n	8002df0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d128      	bne.n	8002df0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	3304      	adds	r3, #4
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fe fc2e 	bl	8001604 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8002e00 <xTaskPriorityDisinherit+0xd8>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d903      	bls.n	8002dd0 <xTaskPriorityDisinherit+0xa8>
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dcc:	4a0c      	ldr	r2, [pc, #48]	@ (8002e00 <xTaskPriorityDisinherit+0xd8>)
 8002dce:	6013      	str	r3, [r2, #0]
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4a09      	ldr	r2, [pc, #36]	@ (8002e04 <xTaskPriorityDisinherit+0xdc>)
 8002dde:	441a      	add	r2, r3
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	3304      	adds	r3, #4
 8002de4:	4619      	mov	r1, r3
 8002de6:	4610      	mov	r0, r2
 8002de8:	f7fe fbb1 	bl	800154e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002dec:	2301      	movs	r3, #1
 8002dee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002df0:	697b      	ldr	r3, [r7, #20]
	}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20000824 	.word	0x20000824
 8002e00:	20000d00 	.word	0x20000d00
 8002e04:	20000828 	.word	0x20000828

08002e08 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002e12:	4b21      	ldr	r3, [pc, #132]	@ (8002e98 <prvAddCurrentTaskToDelayedList+0x90>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e18:	4b20      	ldr	r3, [pc, #128]	@ (8002e9c <prvAddCurrentTaskToDelayedList+0x94>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fe fbf0 	bl	8001604 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e2a:	d10a      	bne.n	8002e42 <prvAddCurrentTaskToDelayedList+0x3a>
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d007      	beq.n	8002e42 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e32:	4b1a      	ldr	r3, [pc, #104]	@ (8002e9c <prvAddCurrentTaskToDelayedList+0x94>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	3304      	adds	r3, #4
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4819      	ldr	r0, [pc, #100]	@ (8002ea0 <prvAddCurrentTaskToDelayedList+0x98>)
 8002e3c:	f7fe fb87 	bl	800154e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002e40:	e026      	b.n	8002e90 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4413      	add	r3, r2
 8002e48:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002e4a:	4b14      	ldr	r3, [pc, #80]	@ (8002e9c <prvAddCurrentTaskToDelayedList+0x94>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d209      	bcs.n	8002e6e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e5a:	4b12      	ldr	r3, [pc, #72]	@ (8002ea4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8002e9c <prvAddCurrentTaskToDelayedList+0x94>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	3304      	adds	r3, #4
 8002e64:	4619      	mov	r1, r3
 8002e66:	4610      	mov	r0, r2
 8002e68:	f7fe fb94 	bl	8001594 <vListInsert>
}
 8002e6c:	e010      	b.n	8002e90 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ea8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	4b0a      	ldr	r3, [pc, #40]	@ (8002e9c <prvAddCurrentTaskToDelayedList+0x94>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	3304      	adds	r3, #4
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	f7fe fb8a 	bl	8001594 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002e80:	4b0a      	ldr	r3, [pc, #40]	@ (8002eac <prvAddCurrentTaskToDelayedList+0xa4>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d202      	bcs.n	8002e90 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8002e8a:	4a08      	ldr	r2, [pc, #32]	@ (8002eac <prvAddCurrentTaskToDelayedList+0xa4>)
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	6013      	str	r3, [r2, #0]
}
 8002e90:	bf00      	nop
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	20000cfc 	.word	0x20000cfc
 8002e9c:	20000824 	.word	0x20000824
 8002ea0:	20000ce4 	.word	0x20000ce4
 8002ea4:	20000cb4 	.word	0x20000cb4
 8002ea8:	20000cb0 	.word	0x20000cb0
 8002eac:	20000d18 	.word	0x20000d18

08002eb0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b08a      	sub	sp, #40	@ 0x28
 8002eb4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002eba:	f000 fad9 	bl	8003470 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002ebe:	4b1d      	ldr	r3, [pc, #116]	@ (8002f34 <xTimerCreateTimerTask+0x84>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d021      	beq.n	8002f0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002ece:	1d3a      	adds	r2, r7, #4
 8002ed0:	f107 0108 	add.w	r1, r7, #8
 8002ed4:	f107 030c 	add.w	r3, r7, #12
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fe faf3 	bl	80014c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	9202      	str	r2, [sp, #8]
 8002ee6:	9301      	str	r3, [sp, #4]
 8002ee8:	2302      	movs	r3, #2
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	2300      	movs	r3, #0
 8002eee:	460a      	mov	r2, r1
 8002ef0:	4911      	ldr	r1, [pc, #68]	@ (8002f38 <xTimerCreateTimerTask+0x88>)
 8002ef2:	4812      	ldr	r0, [pc, #72]	@ (8002f3c <xTimerCreateTimerTask+0x8c>)
 8002ef4:	f7ff f8a6 	bl	8002044 <xTaskCreateStatic>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	4a11      	ldr	r2, [pc, #68]	@ (8002f40 <xTimerCreateTimerTask+0x90>)
 8002efc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8002efe:	4b10      	ldr	r3, [pc, #64]	@ (8002f40 <xTimerCreateTimerTask+0x90>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8002f06:	2301      	movs	r3, #1
 8002f08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10b      	bne.n	8002f28 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8002f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f14:	f383 8811 	msr	BASEPRI, r3
 8002f18:	f3bf 8f6f 	isb	sy
 8002f1c:	f3bf 8f4f 	dsb	sy
 8002f20:	613b      	str	r3, [r7, #16]
}
 8002f22:	bf00      	nop
 8002f24:	bf00      	nop
 8002f26:	e7fd      	b.n	8002f24 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8002f28:	697b      	ldr	r3, [r7, #20]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3718      	adds	r7, #24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	20000d54 	.word	0x20000d54
 8002f38:	08003ea0 	.word	0x08003ea0
 8002f3c:	08003065 	.word	0x08003065
 8002f40:	20000d58 	.word	0x20000d58

08002f44 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b08a      	sub	sp, #40	@ 0x28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
 8002f50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8002f52:	2300      	movs	r3, #0
 8002f54:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10b      	bne.n	8002f74 <xTimerGenericCommand+0x30>
	__asm volatile
 8002f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f60:	f383 8811 	msr	BASEPRI, r3
 8002f64:	f3bf 8f6f 	isb	sy
 8002f68:	f3bf 8f4f 	dsb	sy
 8002f6c:	623b      	str	r3, [r7, #32]
}
 8002f6e:	bf00      	nop
 8002f70:	bf00      	nop
 8002f72:	e7fd      	b.n	8002f70 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002f74:	4b19      	ldr	r3, [pc, #100]	@ (8002fdc <xTimerGenericCommand+0x98>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d02a      	beq.n	8002fd2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	2b05      	cmp	r3, #5
 8002f8c:	dc18      	bgt.n	8002fc0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002f8e:	f7ff fead 	bl	8002cec <xTaskGetSchedulerState>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d109      	bne.n	8002fac <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002f98:	4b10      	ldr	r3, [pc, #64]	@ (8002fdc <xTimerGenericCommand+0x98>)
 8002f9a:	6818      	ldr	r0, [r3, #0]
 8002f9c:	f107 0110 	add.w	r1, r7, #16
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fa4:	f7fe fc62 	bl	800186c <xQueueGenericSend>
 8002fa8:	6278      	str	r0, [r7, #36]	@ 0x24
 8002faa:	e012      	b.n	8002fd2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002fac:	4b0b      	ldr	r3, [pc, #44]	@ (8002fdc <xTimerGenericCommand+0x98>)
 8002fae:	6818      	ldr	r0, [r3, #0]
 8002fb0:	f107 0110 	add.w	r1, r7, #16
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f7fe fc58 	bl	800186c <xQueueGenericSend>
 8002fbc:	6278      	str	r0, [r7, #36]	@ 0x24
 8002fbe:	e008      	b.n	8002fd2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002fc0:	4b06      	ldr	r3, [pc, #24]	@ (8002fdc <xTimerGenericCommand+0x98>)
 8002fc2:	6818      	ldr	r0, [r3, #0]
 8002fc4:	f107 0110 	add.w	r1, r7, #16
 8002fc8:	2300      	movs	r3, #0
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	f7fe fd50 	bl	8001a70 <xQueueGenericSendFromISR>
 8002fd0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3728      	adds	r7, #40	@ 0x28
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	20000d54 	.word	0x20000d54

08002fe0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b088      	sub	sp, #32
 8002fe4:	af02      	add	r7, sp, #8
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002fea:	4b1d      	ldr	r3, [pc, #116]	@ (8003060 <prvProcessExpiredTimer+0x80>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	3304      	adds	r3, #4
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7fe fb03 	bl	8001604 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d123      	bne.n	800304e <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	699a      	ldr	r2, [r3, #24]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	18d1      	adds	r1, r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	6978      	ldr	r0, [r7, #20]
 8003014:	f000 f8cc 	bl	80031b0 <prvInsertTimerInActiveList>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d017      	beq.n	800304e <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800301e:	2300      	movs	r3, #0
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	2300      	movs	r3, #0
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	2100      	movs	r1, #0
 8003028:	6978      	ldr	r0, [r7, #20]
 800302a:	f7ff ff8b 	bl	8002f44 <xTimerGenericCommand>
 800302e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10b      	bne.n	800304e <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8003036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800303a:	f383 8811 	msr	BASEPRI, r3
 800303e:	f3bf 8f6f 	isb	sy
 8003042:	f3bf 8f4f 	dsb	sy
 8003046:	60fb      	str	r3, [r7, #12]
}
 8003048:	bf00      	nop
 800304a:	bf00      	nop
 800304c:	e7fd      	b.n	800304a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003052:	6978      	ldr	r0, [r7, #20]
 8003054:	4798      	blx	r3
}
 8003056:	bf00      	nop
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	20000d4c 	.word	0x20000d4c

08003064 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800306c:	f107 0308 	add.w	r3, r7, #8
 8003070:	4618      	mov	r0, r3
 8003072:	f000 f859 	bl	8003128 <prvGetNextExpireTime>
 8003076:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	4619      	mov	r1, r3
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 f805 	bl	800308c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003082:	f000 f8d7 	bl	8003234 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003086:	bf00      	nop
 8003088:	e7f0      	b.n	800306c <prvTimerTask+0x8>
	...

0800308c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003096:	f7ff fa2f 	bl	80024f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800309a:	f107 0308 	add.w	r3, r7, #8
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 f866 	bl	8003170 <prvSampleTimeNow>
 80030a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d130      	bne.n	800310e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10a      	bne.n	80030c8 <prvProcessTimerOrBlockTask+0x3c>
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d806      	bhi.n	80030c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80030ba:	f7ff fa2b 	bl	8002514 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80030be:	68f9      	ldr	r1, [r7, #12]
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f7ff ff8d 	bl	8002fe0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80030c6:	e024      	b.n	8003112 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d008      	beq.n	80030e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80030ce:	4b13      	ldr	r3, [pc, #76]	@ (800311c <prvProcessTimerOrBlockTask+0x90>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	bf0c      	ite	eq
 80030d8:	2301      	moveq	r3, #1
 80030da:	2300      	movne	r3, #0
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80030e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003120 <prvProcessTimerOrBlockTask+0x94>)
 80030e2:	6818      	ldr	r0, [r3, #0]
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	4619      	mov	r1, r3
 80030ee:	f7fe ff75 	bl	8001fdc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80030f2:	f7ff fa0f 	bl	8002514 <xTaskResumeAll>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10a      	bne.n	8003112 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80030fc:	4b09      	ldr	r3, [pc, #36]	@ (8003124 <prvProcessTimerOrBlockTask+0x98>)
 80030fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	f3bf 8f4f 	dsb	sy
 8003108:	f3bf 8f6f 	isb	sy
}
 800310c:	e001      	b.n	8003112 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800310e:	f7ff fa01 	bl	8002514 <xTaskResumeAll>
}
 8003112:	bf00      	nop
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	20000d50 	.word	0x20000d50
 8003120:	20000d54 	.word	0x20000d54
 8003124:	e000ed04 	.word	0xe000ed04

08003128 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003130:	4b0e      	ldr	r3, [pc, #56]	@ (800316c <prvGetNextExpireTime+0x44>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	bf0c      	ite	eq
 800313a:	2301      	moveq	r3, #1
 800313c:	2300      	movne	r3, #0
 800313e:	b2db      	uxtb	r3, r3
 8003140:	461a      	mov	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d105      	bne.n	800315a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800314e:	4b07      	ldr	r3, [pc, #28]	@ (800316c <prvGetNextExpireTime+0x44>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	e001      	b.n	800315e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800315a:	2300      	movs	r3, #0
 800315c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800315e:	68fb      	ldr	r3, [r7, #12]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3714      	adds	r7, #20
 8003164:	46bd      	mov	sp, r7
 8003166:	bc80      	pop	{r7}
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	20000d4c 	.word	0x20000d4c

08003170 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003178:	f7ff fa6a 	bl	8002650 <xTaskGetTickCount>
 800317c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800317e:	4b0b      	ldr	r3, [pc, #44]	@ (80031ac <prvSampleTimeNow+0x3c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	429a      	cmp	r2, r3
 8003186:	d205      	bcs.n	8003194 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003188:	f000 f910 	bl	80033ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	e002      	b.n	800319a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800319a:	4a04      	ldr	r2, [pc, #16]	@ (80031ac <prvSampleTimeNow+0x3c>)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80031a0:	68fb      	ldr	r3, [r7, #12]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	20000d5c 	.word	0x20000d5c

080031b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
 80031bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80031be:	2300      	movs	r3, #0
 80031c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d812      	bhi.n	80031fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	1ad2      	subs	r2, r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d302      	bcc.n	80031ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80031e4:	2301      	movs	r3, #1
 80031e6:	617b      	str	r3, [r7, #20]
 80031e8:	e01b      	b.n	8003222 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80031ea:	4b10      	ldr	r3, [pc, #64]	@ (800322c <prvInsertTimerInActiveList+0x7c>)
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	3304      	adds	r3, #4
 80031f2:	4619      	mov	r1, r3
 80031f4:	4610      	mov	r0, r2
 80031f6:	f7fe f9cd 	bl	8001594 <vListInsert>
 80031fa:	e012      	b.n	8003222 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	429a      	cmp	r2, r3
 8003202:	d206      	bcs.n	8003212 <prvInsertTimerInActiveList+0x62>
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	429a      	cmp	r2, r3
 800320a:	d302      	bcc.n	8003212 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800320c:	2301      	movs	r3, #1
 800320e:	617b      	str	r3, [r7, #20]
 8003210:	e007      	b.n	8003222 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003212:	4b07      	ldr	r3, [pc, #28]	@ (8003230 <prvInsertTimerInActiveList+0x80>)
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	3304      	adds	r3, #4
 800321a:	4619      	mov	r1, r3
 800321c:	4610      	mov	r0, r2
 800321e:	f7fe f9b9 	bl	8001594 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003222:	697b      	ldr	r3, [r7, #20]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3718      	adds	r7, #24
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	20000d50 	.word	0x20000d50
 8003230:	20000d4c 	.word	0x20000d4c

08003234 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b08e      	sub	sp, #56	@ 0x38
 8003238:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800323a:	e0a5      	b.n	8003388 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	da19      	bge.n	8003276 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003242:	1d3b      	adds	r3, r7, #4
 8003244:	3304      	adds	r3, #4
 8003246:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10b      	bne.n	8003266 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800324e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003252:	f383 8811 	msr	BASEPRI, r3
 8003256:	f3bf 8f6f 	isb	sy
 800325a:	f3bf 8f4f 	dsb	sy
 800325e:	61fb      	str	r3, [r7, #28]
}
 8003260:	bf00      	nop
 8003262:	bf00      	nop
 8003264:	e7fd      	b.n	8003262 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800326c:	6850      	ldr	r0, [r2, #4]
 800326e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003270:	6892      	ldr	r2, [r2, #8]
 8003272:	4611      	mov	r1, r2
 8003274:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	f2c0 8085 	blt.w	8003388 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d004      	beq.n	8003294 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800328a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800328c:	3304      	adds	r3, #4
 800328e:	4618      	mov	r0, r3
 8003290:	f7fe f9b8 	bl	8001604 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003294:	463b      	mov	r3, r7
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff ff6a 	bl	8003170 <prvSampleTimeNow>
 800329c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b09      	cmp	r3, #9
 80032a2:	d86c      	bhi.n	800337e <prvProcessReceivedCommands+0x14a>
 80032a4:	a201      	add	r2, pc, #4	@ (adr r2, 80032ac <prvProcessReceivedCommands+0x78>)
 80032a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032aa:	bf00      	nop
 80032ac:	080032d5 	.word	0x080032d5
 80032b0:	080032d5 	.word	0x080032d5
 80032b4:	080032d5 	.word	0x080032d5
 80032b8:	0800337f 	.word	0x0800337f
 80032bc:	08003333 	.word	0x08003333
 80032c0:	0800336d 	.word	0x0800336d
 80032c4:	080032d5 	.word	0x080032d5
 80032c8:	080032d5 	.word	0x080032d5
 80032cc:	0800337f 	.word	0x0800337f
 80032d0:	08003333 	.word	0x08003333
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80032d4:	68ba      	ldr	r2, [r7, #8]
 80032d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	18d1      	adds	r1, r2, r3
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032e2:	f7ff ff65 	bl	80031b0 <prvInsertTimerInActiveList>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d04a      	beq.n	8003382 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80032ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032f2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80032f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032f6:	69db      	ldr	r3, [r3, #28]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d142      	bne.n	8003382 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	441a      	add	r2, r3
 8003304:	2300      	movs	r3, #0
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	2300      	movs	r3, #0
 800330a:	2100      	movs	r1, #0
 800330c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800330e:	f7ff fe19 	bl	8002f44 <xTimerGenericCommand>
 8003312:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003314:	6a3b      	ldr	r3, [r7, #32]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d133      	bne.n	8003382 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 800331a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800331e:	f383 8811 	msr	BASEPRI, r3
 8003322:	f3bf 8f6f 	isb	sy
 8003326:	f3bf 8f4f 	dsb	sy
 800332a:	61bb      	str	r3, [r7, #24]
}
 800332c:	bf00      	nop
 800332e:	bf00      	nop
 8003330:	e7fd      	b.n	800332e <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003336:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10b      	bne.n	8003358 <prvProcessReceivedCommands+0x124>
	__asm volatile
 8003340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003344:	f383 8811 	msr	BASEPRI, r3
 8003348:	f3bf 8f6f 	isb	sy
 800334c:	f3bf 8f4f 	dsb	sy
 8003350:	617b      	str	r3, [r7, #20]
}
 8003352:	bf00      	nop
 8003354:	bf00      	nop
 8003356:	e7fd      	b.n	8003354 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800335a:	699a      	ldr	r2, [r3, #24]
 800335c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335e:	18d1      	adds	r1, r2, r3
 8003360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003362:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003364:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003366:	f7ff ff23 	bl	80031b0 <prvInsertTimerInActiveList>
					break;
 800336a:	e00d      	b.n	8003388 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800336c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800336e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003372:	2b00      	cmp	r3, #0
 8003374:	d107      	bne.n	8003386 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8003376:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003378:	f000 fb72 	bl	8003a60 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800337c:	e003      	b.n	8003386 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 800337e:	bf00      	nop
 8003380:	e002      	b.n	8003388 <prvProcessReceivedCommands+0x154>
					break;
 8003382:	bf00      	nop
 8003384:	e000      	b.n	8003388 <prvProcessReceivedCommands+0x154>
					break;
 8003386:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003388:	4b07      	ldr	r3, [pc, #28]	@ (80033a8 <prvProcessReceivedCommands+0x174>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	1d39      	adds	r1, r7, #4
 800338e:	2200      	movs	r2, #0
 8003390:	4618      	mov	r0, r3
 8003392:	f7fe fc09 	bl	8001ba8 <xQueueReceive>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	f47f af4f 	bne.w	800323c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800339e:	bf00      	nop
 80033a0:	bf00      	nop
 80033a2:	3730      	adds	r7, #48	@ 0x30
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	20000d54 	.word	0x20000d54

080033ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b088      	sub	sp, #32
 80033b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80033b2:	e046      	b.n	8003442 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80033b4:	4b2c      	ldr	r3, [pc, #176]	@ (8003468 <prvSwitchTimerLists+0xbc>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80033be:	4b2a      	ldr	r3, [pc, #168]	@ (8003468 <prvSwitchTimerLists+0xbc>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	3304      	adds	r3, #4
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fe f919 	bl	8001604 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d12f      	bne.n	8003442 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	4413      	add	r3, r2
 80033ea:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d90e      	bls.n	8003412 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003400:	4b19      	ldr	r3, [pc, #100]	@ (8003468 <prvSwitchTimerLists+0xbc>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	3304      	adds	r3, #4
 8003408:	4619      	mov	r1, r3
 800340a:	4610      	mov	r0, r2
 800340c:	f7fe f8c2 	bl	8001594 <vListInsert>
 8003410:	e017      	b.n	8003442 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003412:	2300      	movs	r3, #0
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	2300      	movs	r3, #0
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	2100      	movs	r1, #0
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f7ff fd91 	bl	8002f44 <xTimerGenericCommand>
 8003422:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10b      	bne.n	8003442 <prvSwitchTimerLists+0x96>
	__asm volatile
 800342a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800342e:	f383 8811 	msr	BASEPRI, r3
 8003432:	f3bf 8f6f 	isb	sy
 8003436:	f3bf 8f4f 	dsb	sy
 800343a:	603b      	str	r3, [r7, #0]
}
 800343c:	bf00      	nop
 800343e:	bf00      	nop
 8003440:	e7fd      	b.n	800343e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003442:	4b09      	ldr	r3, [pc, #36]	@ (8003468 <prvSwitchTimerLists+0xbc>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1b3      	bne.n	80033b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800344c:	4b06      	ldr	r3, [pc, #24]	@ (8003468 <prvSwitchTimerLists+0xbc>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003452:	4b06      	ldr	r3, [pc, #24]	@ (800346c <prvSwitchTimerLists+0xc0>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a04      	ldr	r2, [pc, #16]	@ (8003468 <prvSwitchTimerLists+0xbc>)
 8003458:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800345a:	4a04      	ldr	r2, [pc, #16]	@ (800346c <prvSwitchTimerLists+0xc0>)
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	6013      	str	r3, [r2, #0]
}
 8003460:	bf00      	nop
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	20000d4c 	.word	0x20000d4c
 800346c:	20000d50 	.word	0x20000d50

08003470 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003476:	f000 f929 	bl	80036cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800347a:	4b15      	ldr	r3, [pc, #84]	@ (80034d0 <prvCheckForValidListAndQueue+0x60>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d120      	bne.n	80034c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003482:	4814      	ldr	r0, [pc, #80]	@ (80034d4 <prvCheckForValidListAndQueue+0x64>)
 8003484:	f7fe f838 	bl	80014f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003488:	4813      	ldr	r0, [pc, #76]	@ (80034d8 <prvCheckForValidListAndQueue+0x68>)
 800348a:	f7fe f835 	bl	80014f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800348e:	4b13      	ldr	r3, [pc, #76]	@ (80034dc <prvCheckForValidListAndQueue+0x6c>)
 8003490:	4a10      	ldr	r2, [pc, #64]	@ (80034d4 <prvCheckForValidListAndQueue+0x64>)
 8003492:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003494:	4b12      	ldr	r3, [pc, #72]	@ (80034e0 <prvCheckForValidListAndQueue+0x70>)
 8003496:	4a10      	ldr	r2, [pc, #64]	@ (80034d8 <prvCheckForValidListAndQueue+0x68>)
 8003498:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800349a:	2300      	movs	r3, #0
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	4b11      	ldr	r3, [pc, #68]	@ (80034e4 <prvCheckForValidListAndQueue+0x74>)
 80034a0:	4a11      	ldr	r2, [pc, #68]	@ (80034e8 <prvCheckForValidListAndQueue+0x78>)
 80034a2:	2110      	movs	r1, #16
 80034a4:	200a      	movs	r0, #10
 80034a6:	f7fe f941 	bl	800172c <xQueueGenericCreateStatic>
 80034aa:	4603      	mov	r3, r0
 80034ac:	4a08      	ldr	r2, [pc, #32]	@ (80034d0 <prvCheckForValidListAndQueue+0x60>)
 80034ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80034b0:	4b07      	ldr	r3, [pc, #28]	@ (80034d0 <prvCheckForValidListAndQueue+0x60>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d005      	beq.n	80034c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80034b8:	4b05      	ldr	r3, [pc, #20]	@ (80034d0 <prvCheckForValidListAndQueue+0x60>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	490b      	ldr	r1, [pc, #44]	@ (80034ec <prvCheckForValidListAndQueue+0x7c>)
 80034be:	4618      	mov	r0, r3
 80034c0:	f7fe fd64 	bl	8001f8c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80034c4:	f000 f932 	bl	800372c <vPortExitCritical>
}
 80034c8:	bf00      	nop
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	20000d54 	.word	0x20000d54
 80034d4:	20000d24 	.word	0x20000d24
 80034d8:	20000d38 	.word	0x20000d38
 80034dc:	20000d4c 	.word	0x20000d4c
 80034e0:	20000d50 	.word	0x20000d50
 80034e4:	20000e00 	.word	0x20000e00
 80034e8:	20000d60 	.word	0x20000d60
 80034ec:	08003ea8 	.word	0x08003ea8

080034f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	3b04      	subs	r3, #4
 8003500:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003508:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	3b04      	subs	r3, #4
 800350e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	f023 0201 	bic.w	r2, r3, #1
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	3b04      	subs	r3, #4
 800351e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003520:	4a08      	ldr	r2, [pc, #32]	@ (8003544 <pxPortInitialiseStack+0x54>)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	3b14      	subs	r3, #20
 800352a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	3b20      	subs	r3, #32
 8003536:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003538:	68fb      	ldr	r3, [r7, #12]
}
 800353a:	4618      	mov	r0, r3
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	bc80      	pop	{r7}
 8003542:	4770      	bx	lr
 8003544:	08003549 	.word	0x08003549

08003548 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800354e:	2300      	movs	r3, #0
 8003550:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003552:	4b12      	ldr	r3, [pc, #72]	@ (800359c <prvTaskExitError+0x54>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355a:	d00b      	beq.n	8003574 <prvTaskExitError+0x2c>
	__asm volatile
 800355c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003560:	f383 8811 	msr	BASEPRI, r3
 8003564:	f3bf 8f6f 	isb	sy
 8003568:	f3bf 8f4f 	dsb	sy
 800356c:	60fb      	str	r3, [r7, #12]
}
 800356e:	bf00      	nop
 8003570:	bf00      	nop
 8003572:	e7fd      	b.n	8003570 <prvTaskExitError+0x28>
	__asm volatile
 8003574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003578:	f383 8811 	msr	BASEPRI, r3
 800357c:	f3bf 8f6f 	isb	sy
 8003580:	f3bf 8f4f 	dsb	sy
 8003584:	60bb      	str	r3, [r7, #8]
}
 8003586:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003588:	bf00      	nop
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0fc      	beq.n	800358a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003590:	bf00      	nop
 8003592:	bf00      	nop
 8003594:	3714      	adds	r7, #20
 8003596:	46bd      	mov	sp, r7
 8003598:	bc80      	pop	{r7}
 800359a:	4770      	bx	lr
 800359c:	20000010 	.word	0x20000010

080035a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80035a0:	4b07      	ldr	r3, [pc, #28]	@ (80035c0 <pxCurrentTCBConst2>)
 80035a2:	6819      	ldr	r1, [r3, #0]
 80035a4:	6808      	ldr	r0, [r1, #0]
 80035a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80035aa:	f380 8809 	msr	PSP, r0
 80035ae:	f3bf 8f6f 	isb	sy
 80035b2:	f04f 0000 	mov.w	r0, #0
 80035b6:	f380 8811 	msr	BASEPRI, r0
 80035ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80035be:	4770      	bx	lr

080035c0 <pxCurrentTCBConst2>:
 80035c0:	20000824 	.word	0x20000824
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80035c4:	bf00      	nop
 80035c6:	bf00      	nop

080035c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80035c8:	4806      	ldr	r0, [pc, #24]	@ (80035e4 <prvPortStartFirstTask+0x1c>)
 80035ca:	6800      	ldr	r0, [r0, #0]
 80035cc:	6800      	ldr	r0, [r0, #0]
 80035ce:	f380 8808 	msr	MSP, r0
 80035d2:	b662      	cpsie	i
 80035d4:	b661      	cpsie	f
 80035d6:	f3bf 8f4f 	dsb	sy
 80035da:	f3bf 8f6f 	isb	sy
 80035de:	df00      	svc	0
 80035e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80035e2:	bf00      	nop
 80035e4:	e000ed08 	.word	0xe000ed08

080035e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80035ee:	4b32      	ldr	r3, [pc, #200]	@ (80036b8 <xPortStartScheduler+0xd0>)
 80035f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	22ff      	movs	r2, #255	@ 0xff
 80035fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	b2db      	uxtb	r3, r3
 8003606:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003608:	78fb      	ldrb	r3, [r7, #3]
 800360a:	b2db      	uxtb	r3, r3
 800360c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003610:	b2da      	uxtb	r2, r3
 8003612:	4b2a      	ldr	r3, [pc, #168]	@ (80036bc <xPortStartScheduler+0xd4>)
 8003614:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003616:	4b2a      	ldr	r3, [pc, #168]	@ (80036c0 <xPortStartScheduler+0xd8>)
 8003618:	2207      	movs	r2, #7
 800361a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800361c:	e009      	b.n	8003632 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800361e:	4b28      	ldr	r3, [pc, #160]	@ (80036c0 <xPortStartScheduler+0xd8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	3b01      	subs	r3, #1
 8003624:	4a26      	ldr	r2, [pc, #152]	@ (80036c0 <xPortStartScheduler+0xd8>)
 8003626:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003628:	78fb      	ldrb	r3, [r7, #3]
 800362a:	b2db      	uxtb	r3, r3
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	b2db      	uxtb	r3, r3
 8003630:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003632:	78fb      	ldrb	r3, [r7, #3]
 8003634:	b2db      	uxtb	r3, r3
 8003636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800363a:	2b80      	cmp	r3, #128	@ 0x80
 800363c:	d0ef      	beq.n	800361e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800363e:	4b20      	ldr	r3, [pc, #128]	@ (80036c0 <xPortStartScheduler+0xd8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f1c3 0307 	rsb	r3, r3, #7
 8003646:	2b04      	cmp	r3, #4
 8003648:	d00b      	beq.n	8003662 <xPortStartScheduler+0x7a>
	__asm volatile
 800364a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800364e:	f383 8811 	msr	BASEPRI, r3
 8003652:	f3bf 8f6f 	isb	sy
 8003656:	f3bf 8f4f 	dsb	sy
 800365a:	60bb      	str	r3, [r7, #8]
}
 800365c:	bf00      	nop
 800365e:	bf00      	nop
 8003660:	e7fd      	b.n	800365e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003662:	4b17      	ldr	r3, [pc, #92]	@ (80036c0 <xPortStartScheduler+0xd8>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	021b      	lsls	r3, r3, #8
 8003668:	4a15      	ldr	r2, [pc, #84]	@ (80036c0 <xPortStartScheduler+0xd8>)
 800366a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800366c:	4b14      	ldr	r3, [pc, #80]	@ (80036c0 <xPortStartScheduler+0xd8>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003674:	4a12      	ldr	r2, [pc, #72]	@ (80036c0 <xPortStartScheduler+0xd8>)
 8003676:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	b2da      	uxtb	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003680:	4b10      	ldr	r3, [pc, #64]	@ (80036c4 <xPortStartScheduler+0xdc>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a0f      	ldr	r2, [pc, #60]	@ (80036c4 <xPortStartScheduler+0xdc>)
 8003686:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800368a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800368c:	4b0d      	ldr	r3, [pc, #52]	@ (80036c4 <xPortStartScheduler+0xdc>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a0c      	ldr	r2, [pc, #48]	@ (80036c4 <xPortStartScheduler+0xdc>)
 8003692:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003696:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003698:	f000 f8b8 	bl	800380c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800369c:	4b0a      	ldr	r3, [pc, #40]	@ (80036c8 <xPortStartScheduler+0xe0>)
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80036a2:	f7ff ff91 	bl	80035c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80036a6:	f7ff f8a1 	bl	80027ec <vTaskSwitchContext>
	prvTaskExitError();
 80036aa:	f7ff ff4d 	bl	8003548 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	e000e400 	.word	0xe000e400
 80036bc:	20000e50 	.word	0x20000e50
 80036c0:	20000e54 	.word	0x20000e54
 80036c4:	e000ed20 	.word	0xe000ed20
 80036c8:	20000010 	.word	0x20000010

080036cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
	__asm volatile
 80036d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036d6:	f383 8811 	msr	BASEPRI, r3
 80036da:	f3bf 8f6f 	isb	sy
 80036de:	f3bf 8f4f 	dsb	sy
 80036e2:	607b      	str	r3, [r7, #4]
}
 80036e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80036e6:	4b0f      	ldr	r3, [pc, #60]	@ (8003724 <vPortEnterCritical+0x58>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	3301      	adds	r3, #1
 80036ec:	4a0d      	ldr	r2, [pc, #52]	@ (8003724 <vPortEnterCritical+0x58>)
 80036ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80036f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003724 <vPortEnterCritical+0x58>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d110      	bne.n	800371a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80036f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003728 <vPortEnterCritical+0x5c>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00b      	beq.n	800371a <vPortEnterCritical+0x4e>
	__asm volatile
 8003702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003706:	f383 8811 	msr	BASEPRI, r3
 800370a:	f3bf 8f6f 	isb	sy
 800370e:	f3bf 8f4f 	dsb	sy
 8003712:	603b      	str	r3, [r7, #0]
}
 8003714:	bf00      	nop
 8003716:	bf00      	nop
 8003718:	e7fd      	b.n	8003716 <vPortEnterCritical+0x4a>
	}
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr
 8003724:	20000010 	.word	0x20000010
 8003728:	e000ed04 	.word	0xe000ed04

0800372c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003732:	4b12      	ldr	r3, [pc, #72]	@ (800377c <vPortExitCritical+0x50>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10b      	bne.n	8003752 <vPortExitCritical+0x26>
	__asm volatile
 800373a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800373e:	f383 8811 	msr	BASEPRI, r3
 8003742:	f3bf 8f6f 	isb	sy
 8003746:	f3bf 8f4f 	dsb	sy
 800374a:	607b      	str	r3, [r7, #4]
}
 800374c:	bf00      	nop
 800374e:	bf00      	nop
 8003750:	e7fd      	b.n	800374e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003752:	4b0a      	ldr	r3, [pc, #40]	@ (800377c <vPortExitCritical+0x50>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	3b01      	subs	r3, #1
 8003758:	4a08      	ldr	r2, [pc, #32]	@ (800377c <vPortExitCritical+0x50>)
 800375a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800375c:	4b07      	ldr	r3, [pc, #28]	@ (800377c <vPortExitCritical+0x50>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d105      	bne.n	8003770 <vPortExitCritical+0x44>
 8003764:	2300      	movs	r3, #0
 8003766:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	f383 8811 	msr	BASEPRI, r3
}
 800376e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	bc80      	pop	{r7}
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	20000010 	.word	0x20000010

08003780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003780:	f3ef 8009 	mrs	r0, PSP
 8003784:	f3bf 8f6f 	isb	sy
 8003788:	4b0d      	ldr	r3, [pc, #52]	@ (80037c0 <pxCurrentTCBConst>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003790:	6010      	str	r0, [r2, #0]
 8003792:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003796:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800379a:	f380 8811 	msr	BASEPRI, r0
 800379e:	f7ff f825 	bl	80027ec <vTaskSwitchContext>
 80037a2:	f04f 0000 	mov.w	r0, #0
 80037a6:	f380 8811 	msr	BASEPRI, r0
 80037aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80037ae:	6819      	ldr	r1, [r3, #0]
 80037b0:	6808      	ldr	r0, [r1, #0]
 80037b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80037b6:	f380 8809 	msr	PSP, r0
 80037ba:	f3bf 8f6f 	isb	sy
 80037be:	4770      	bx	lr

080037c0 <pxCurrentTCBConst>:
 80037c0:	20000824 	.word	0x20000824
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80037c4:	bf00      	nop
 80037c6:	bf00      	nop

080037c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
	__asm volatile
 80037ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037d2:	f383 8811 	msr	BASEPRI, r3
 80037d6:	f3bf 8f6f 	isb	sy
 80037da:	f3bf 8f4f 	dsb	sy
 80037de:	607b      	str	r3, [r7, #4]
}
 80037e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80037e2:	f7fe ff43 	bl	800266c <xTaskIncrementTick>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80037ec:	4b06      	ldr	r3, [pc, #24]	@ (8003808 <xPortSysTickHandler+0x40>)
 80037ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	2300      	movs	r3, #0
 80037f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	f383 8811 	msr	BASEPRI, r3
}
 80037fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003800:	bf00      	nop
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	e000ed04 	.word	0xe000ed04

0800380c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003810:	4b0a      	ldr	r3, [pc, #40]	@ (800383c <vPortSetupTimerInterrupt+0x30>)
 8003812:	2200      	movs	r2, #0
 8003814:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003816:	4b0a      	ldr	r3, [pc, #40]	@ (8003840 <vPortSetupTimerInterrupt+0x34>)
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800381c:	4b09      	ldr	r3, [pc, #36]	@ (8003844 <vPortSetupTimerInterrupt+0x38>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a09      	ldr	r2, [pc, #36]	@ (8003848 <vPortSetupTimerInterrupt+0x3c>)
 8003822:	fba2 2303 	umull	r2, r3, r2, r3
 8003826:	099b      	lsrs	r3, r3, #6
 8003828:	4a08      	ldr	r2, [pc, #32]	@ (800384c <vPortSetupTimerInterrupt+0x40>)
 800382a:	3b01      	subs	r3, #1
 800382c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800382e:	4b03      	ldr	r3, [pc, #12]	@ (800383c <vPortSetupTimerInterrupt+0x30>)
 8003830:	2207      	movs	r2, #7
 8003832:	601a      	str	r2, [r3, #0]
}
 8003834:	bf00      	nop
 8003836:	46bd      	mov	sp, r7
 8003838:	bc80      	pop	{r7}
 800383a:	4770      	bx	lr
 800383c:	e000e010 	.word	0xe000e010
 8003840:	e000e018 	.word	0xe000e018
 8003844:	20000004 	.word	0x20000004
 8003848:	10624dd3 	.word	0x10624dd3
 800384c:	e000e014 	.word	0xe000e014

08003850 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003856:	f3ef 8305 	mrs	r3, IPSR
 800385a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2b0f      	cmp	r3, #15
 8003860:	d915      	bls.n	800388e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003862:	4a17      	ldr	r2, [pc, #92]	@ (80038c0 <vPortValidateInterruptPriority+0x70>)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4413      	add	r3, r2
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800386c:	4b15      	ldr	r3, [pc, #84]	@ (80038c4 <vPortValidateInterruptPriority+0x74>)
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	7afa      	ldrb	r2, [r7, #11]
 8003872:	429a      	cmp	r2, r3
 8003874:	d20b      	bcs.n	800388e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8003876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800387a:	f383 8811 	msr	BASEPRI, r3
 800387e:	f3bf 8f6f 	isb	sy
 8003882:	f3bf 8f4f 	dsb	sy
 8003886:	607b      	str	r3, [r7, #4]
}
 8003888:	bf00      	nop
 800388a:	bf00      	nop
 800388c:	e7fd      	b.n	800388a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800388e:	4b0e      	ldr	r3, [pc, #56]	@ (80038c8 <vPortValidateInterruptPriority+0x78>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003896:	4b0d      	ldr	r3, [pc, #52]	@ (80038cc <vPortValidateInterruptPriority+0x7c>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	429a      	cmp	r2, r3
 800389c:	d90b      	bls.n	80038b6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800389e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038a2:	f383 8811 	msr	BASEPRI, r3
 80038a6:	f3bf 8f6f 	isb	sy
 80038aa:	f3bf 8f4f 	dsb	sy
 80038ae:	603b      	str	r3, [r7, #0]
}
 80038b0:	bf00      	nop
 80038b2:	bf00      	nop
 80038b4:	e7fd      	b.n	80038b2 <vPortValidateInterruptPriority+0x62>
	}
 80038b6:	bf00      	nop
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bc80      	pop	{r7}
 80038be:	4770      	bx	lr
 80038c0:	e000e3f0 	.word	0xe000e3f0
 80038c4:	20000e50 	.word	0x20000e50
 80038c8:	e000ed0c 	.word	0xe000ed0c
 80038cc:	20000e54 	.word	0x20000e54

080038d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b08a      	sub	sp, #40	@ 0x28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80038d8:	2300      	movs	r3, #0
 80038da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80038dc:	f7fe fe0c 	bl	80024f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80038e0:	4b5a      	ldr	r3, [pc, #360]	@ (8003a4c <pvPortMalloc+0x17c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80038e8:	f000 f916 	bl	8003b18 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80038ec:	4b58      	ldr	r3, [pc, #352]	@ (8003a50 <pvPortMalloc+0x180>)
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4013      	ands	r3, r2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f040 8090 	bne.w	8003a1a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d01e      	beq.n	800393e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003900:	2208      	movs	r2, #8
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4413      	add	r3, r2
 8003906:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f003 0307 	and.w	r3, r3, #7
 800390e:	2b00      	cmp	r3, #0
 8003910:	d015      	beq.n	800393e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f023 0307 	bic.w	r3, r3, #7
 8003918:	3308      	adds	r3, #8
 800391a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f003 0307 	and.w	r3, r3, #7
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00b      	beq.n	800393e <pvPortMalloc+0x6e>
	__asm volatile
 8003926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800392a:	f383 8811 	msr	BASEPRI, r3
 800392e:	f3bf 8f6f 	isb	sy
 8003932:	f3bf 8f4f 	dsb	sy
 8003936:	617b      	str	r3, [r7, #20]
}
 8003938:	bf00      	nop
 800393a:	bf00      	nop
 800393c:	e7fd      	b.n	800393a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d06a      	beq.n	8003a1a <pvPortMalloc+0x14a>
 8003944:	4b43      	ldr	r3, [pc, #268]	@ (8003a54 <pvPortMalloc+0x184>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	429a      	cmp	r2, r3
 800394c:	d865      	bhi.n	8003a1a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800394e:	4b42      	ldr	r3, [pc, #264]	@ (8003a58 <pvPortMalloc+0x188>)
 8003950:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003952:	4b41      	ldr	r3, [pc, #260]	@ (8003a58 <pvPortMalloc+0x188>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003958:	e004      	b.n	8003964 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800395a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800395e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	429a      	cmp	r2, r3
 800396c:	d903      	bls.n	8003976 <pvPortMalloc+0xa6>
 800396e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1f1      	bne.n	800395a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003976:	4b35      	ldr	r3, [pc, #212]	@ (8003a4c <pvPortMalloc+0x17c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800397c:	429a      	cmp	r2, r3
 800397e:	d04c      	beq.n	8003a1a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003980:	6a3b      	ldr	r3, [r7, #32]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2208      	movs	r2, #8
 8003986:	4413      	add	r3, r2
 8003988:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800398a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	6a3b      	ldr	r3, [r7, #32]
 8003990:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	1ad2      	subs	r2, r2, r3
 800399a:	2308      	movs	r3, #8
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	429a      	cmp	r2, r3
 80039a0:	d920      	bls.n	80039e4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80039a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4413      	add	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00b      	beq.n	80039cc <pvPortMalloc+0xfc>
	__asm volatile
 80039b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039b8:	f383 8811 	msr	BASEPRI, r3
 80039bc:	f3bf 8f6f 	isb	sy
 80039c0:	f3bf 8f4f 	dsb	sy
 80039c4:	613b      	str	r3, [r7, #16]
}
 80039c6:	bf00      	nop
 80039c8:	bf00      	nop
 80039ca:	e7fd      	b.n	80039c8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80039cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	1ad2      	subs	r2, r2, r3
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80039d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80039de:	69b8      	ldr	r0, [r7, #24]
 80039e0:	f000 f8fc 	bl	8003bdc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80039e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003a54 <pvPortMalloc+0x184>)
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	4a19      	ldr	r2, [pc, #100]	@ (8003a54 <pvPortMalloc+0x184>)
 80039f0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80039f2:	4b18      	ldr	r3, [pc, #96]	@ (8003a54 <pvPortMalloc+0x184>)
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	4b19      	ldr	r3, [pc, #100]	@ (8003a5c <pvPortMalloc+0x18c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d203      	bcs.n	8003a06 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80039fe:	4b15      	ldr	r3, [pc, #84]	@ (8003a54 <pvPortMalloc+0x184>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a16      	ldr	r2, [pc, #88]	@ (8003a5c <pvPortMalloc+0x18c>)
 8003a04:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	4b11      	ldr	r3, [pc, #68]	@ (8003a50 <pvPortMalloc+0x180>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a12:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a16:	2200      	movs	r2, #0
 8003a18:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003a1a:	f7fe fd7b 	bl	8002514 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	f003 0307 	and.w	r3, r3, #7
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00b      	beq.n	8003a40 <pvPortMalloc+0x170>
	__asm volatile
 8003a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a2c:	f383 8811 	msr	BASEPRI, r3
 8003a30:	f3bf 8f6f 	isb	sy
 8003a34:	f3bf 8f4f 	dsb	sy
 8003a38:	60fb      	str	r3, [r7, #12]
}
 8003a3a:	bf00      	nop
 8003a3c:	bf00      	nop
 8003a3e:	e7fd      	b.n	8003a3c <pvPortMalloc+0x16c>
	return pvReturn;
 8003a40:	69fb      	ldr	r3, [r7, #28]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3728      	adds	r7, #40	@ 0x28
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	20001a60 	.word	0x20001a60
 8003a50:	20001a6c 	.word	0x20001a6c
 8003a54:	20001a64 	.word	0x20001a64
 8003a58:	20001a58 	.word	0x20001a58
 8003a5c:	20001a68 	.word	0x20001a68

08003a60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d04a      	beq.n	8003b08 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003a72:	2308      	movs	r3, #8
 8003a74:	425b      	negs	r3, r3
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	4413      	add	r3, r2
 8003a7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	4b22      	ldr	r3, [pc, #136]	@ (8003b10 <vPortFree+0xb0>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10b      	bne.n	8003aa6 <vPortFree+0x46>
	__asm volatile
 8003a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a92:	f383 8811 	msr	BASEPRI, r3
 8003a96:	f3bf 8f6f 	isb	sy
 8003a9a:	f3bf 8f4f 	dsb	sy
 8003a9e:	60fb      	str	r3, [r7, #12]
}
 8003aa0:	bf00      	nop
 8003aa2:	bf00      	nop
 8003aa4:	e7fd      	b.n	8003aa2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00b      	beq.n	8003ac6 <vPortFree+0x66>
	__asm volatile
 8003aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ab2:	f383 8811 	msr	BASEPRI, r3
 8003ab6:	f3bf 8f6f 	isb	sy
 8003aba:	f3bf 8f4f 	dsb	sy
 8003abe:	60bb      	str	r3, [r7, #8]
}
 8003ac0:	bf00      	nop
 8003ac2:	bf00      	nop
 8003ac4:	e7fd      	b.n	8003ac2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	4b11      	ldr	r3, [pc, #68]	@ (8003b10 <vPortFree+0xb0>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d019      	beq.n	8003b08 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d115      	bne.n	8003b08 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8003b10 <vPortFree+0xb0>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	401a      	ands	r2, r3
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003aec:	f7fe fd04 	bl	80024f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	4b07      	ldr	r3, [pc, #28]	@ (8003b14 <vPortFree+0xb4>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4413      	add	r3, r2
 8003afa:	4a06      	ldr	r2, [pc, #24]	@ (8003b14 <vPortFree+0xb4>)
 8003afc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003afe:	6938      	ldr	r0, [r7, #16]
 8003b00:	f000 f86c 	bl	8003bdc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003b04:	f7fe fd06 	bl	8002514 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003b08:	bf00      	nop
 8003b0a:	3718      	adds	r7, #24
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	20001a6c 	.word	0x20001a6c
 8003b14:	20001a64 	.word	0x20001a64

08003b18 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003b1e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003b22:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003b24:	4b27      	ldr	r3, [pc, #156]	@ (8003bc4 <prvHeapInit+0xac>)
 8003b26:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00c      	beq.n	8003b4c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	3307      	adds	r3, #7
 8003b36:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f023 0307 	bic.w	r3, r3, #7
 8003b3e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	4a1f      	ldr	r2, [pc, #124]	@ (8003bc4 <prvHeapInit+0xac>)
 8003b48:	4413      	add	r3, r2
 8003b4a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003b50:	4a1d      	ldr	r2, [pc, #116]	@ (8003bc8 <prvHeapInit+0xb0>)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003b56:	4b1c      	ldr	r3, [pc, #112]	@ (8003bc8 <prvHeapInit+0xb0>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	4413      	add	r3, r2
 8003b62:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003b64:	2208      	movs	r2, #8
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	1a9b      	subs	r3, r3, r2
 8003b6a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f023 0307 	bic.w	r3, r3, #7
 8003b72:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4a15      	ldr	r2, [pc, #84]	@ (8003bcc <prvHeapInit+0xb4>)
 8003b78:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003b7a:	4b14      	ldr	r3, [pc, #80]	@ (8003bcc <prvHeapInit+0xb4>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003b82:	4b12      	ldr	r3, [pc, #72]	@ (8003bcc <prvHeapInit+0xb4>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2200      	movs	r2, #0
 8003b88:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	1ad2      	subs	r2, r2, r3
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003b98:	4b0c      	ldr	r3, [pc, #48]	@ (8003bcc <prvHeapInit+0xb4>)
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	4a0a      	ldr	r2, [pc, #40]	@ (8003bd0 <prvHeapInit+0xb8>)
 8003ba6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	4a09      	ldr	r2, [pc, #36]	@ (8003bd4 <prvHeapInit+0xbc>)
 8003bae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003bb0:	4b09      	ldr	r3, [pc, #36]	@ (8003bd8 <prvHeapInit+0xc0>)
 8003bb2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003bb6:	601a      	str	r2, [r3, #0]
}
 8003bb8:	bf00      	nop
 8003bba:	3714      	adds	r7, #20
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bc80      	pop	{r7}
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	20000e58 	.word	0x20000e58
 8003bc8:	20001a58 	.word	0x20001a58
 8003bcc:	20001a60 	.word	0x20001a60
 8003bd0:	20001a68 	.word	0x20001a68
 8003bd4:	20001a64 	.word	0x20001a64
 8003bd8:	20001a6c 	.word	0x20001a6c

08003bdc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003be4:	4b27      	ldr	r3, [pc, #156]	@ (8003c84 <prvInsertBlockIntoFreeList+0xa8>)
 8003be6:	60fb      	str	r3, [r7, #12]
 8003be8:	e002      	b.n	8003bf0 <prvInsertBlockIntoFreeList+0x14>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	60fb      	str	r3, [r7, #12]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d8f7      	bhi.n	8003bea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	4413      	add	r3, r2
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d108      	bne.n	8003c1e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	441a      	add	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	441a      	add	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d118      	bne.n	8003c64 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	4b14      	ldr	r3, [pc, #80]	@ (8003c88 <prvInsertBlockIntoFreeList+0xac>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d00d      	beq.n	8003c5a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	441a      	add	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	e008      	b.n	8003c6c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003c88 <prvInsertBlockIntoFreeList+0xac>)
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	e003      	b.n	8003c6c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d002      	beq.n	8003c7a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c7a:	bf00      	nop
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bc80      	pop	{r7}
 8003c82:	4770      	bx	lr
 8003c84:	20001a58 	.word	0x20001a58
 8003c88:	20001a60 	.word	0x20001a60

08003c8c <memset>:
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	4402      	add	r2, r0
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d100      	bne.n	8003c96 <memset+0xa>
 8003c94:	4770      	bx	lr
 8003c96:	f803 1b01 	strb.w	r1, [r3], #1
 8003c9a:	e7f9      	b.n	8003c90 <memset+0x4>

08003c9c <_reclaim_reent>:
 8003c9c:	4b29      	ldr	r3, [pc, #164]	@ (8003d44 <_reclaim_reent+0xa8>)
 8003c9e:	b570      	push	{r4, r5, r6, lr}
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4604      	mov	r4, r0
 8003ca4:	4283      	cmp	r3, r0
 8003ca6:	d04b      	beq.n	8003d40 <_reclaim_reent+0xa4>
 8003ca8:	69c3      	ldr	r3, [r0, #28]
 8003caa:	b1ab      	cbz	r3, 8003cd8 <_reclaim_reent+0x3c>
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	b16b      	cbz	r3, 8003ccc <_reclaim_reent+0x30>
 8003cb0:	2500      	movs	r5, #0
 8003cb2:	69e3      	ldr	r3, [r4, #28]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	5959      	ldr	r1, [r3, r5]
 8003cb8:	2900      	cmp	r1, #0
 8003cba:	d13b      	bne.n	8003d34 <_reclaim_reent+0x98>
 8003cbc:	3504      	adds	r5, #4
 8003cbe:	2d80      	cmp	r5, #128	@ 0x80
 8003cc0:	d1f7      	bne.n	8003cb2 <_reclaim_reent+0x16>
 8003cc2:	69e3      	ldr	r3, [r4, #28]
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	68d9      	ldr	r1, [r3, #12]
 8003cc8:	f000 f872 	bl	8003db0 <_free_r>
 8003ccc:	69e3      	ldr	r3, [r4, #28]
 8003cce:	6819      	ldr	r1, [r3, #0]
 8003cd0:	b111      	cbz	r1, 8003cd8 <_reclaim_reent+0x3c>
 8003cd2:	4620      	mov	r0, r4
 8003cd4:	f000 f86c 	bl	8003db0 <_free_r>
 8003cd8:	6961      	ldr	r1, [r4, #20]
 8003cda:	b111      	cbz	r1, 8003ce2 <_reclaim_reent+0x46>
 8003cdc:	4620      	mov	r0, r4
 8003cde:	f000 f867 	bl	8003db0 <_free_r>
 8003ce2:	69e1      	ldr	r1, [r4, #28]
 8003ce4:	b111      	cbz	r1, 8003cec <_reclaim_reent+0x50>
 8003ce6:	4620      	mov	r0, r4
 8003ce8:	f000 f862 	bl	8003db0 <_free_r>
 8003cec:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003cee:	b111      	cbz	r1, 8003cf6 <_reclaim_reent+0x5a>
 8003cf0:	4620      	mov	r0, r4
 8003cf2:	f000 f85d 	bl	8003db0 <_free_r>
 8003cf6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003cf8:	b111      	cbz	r1, 8003d00 <_reclaim_reent+0x64>
 8003cfa:	4620      	mov	r0, r4
 8003cfc:	f000 f858 	bl	8003db0 <_free_r>
 8003d00:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8003d02:	b111      	cbz	r1, 8003d0a <_reclaim_reent+0x6e>
 8003d04:	4620      	mov	r0, r4
 8003d06:	f000 f853 	bl	8003db0 <_free_r>
 8003d0a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003d0c:	b111      	cbz	r1, 8003d14 <_reclaim_reent+0x78>
 8003d0e:	4620      	mov	r0, r4
 8003d10:	f000 f84e 	bl	8003db0 <_free_r>
 8003d14:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003d16:	b111      	cbz	r1, 8003d1e <_reclaim_reent+0x82>
 8003d18:	4620      	mov	r0, r4
 8003d1a:	f000 f849 	bl	8003db0 <_free_r>
 8003d1e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003d20:	b111      	cbz	r1, 8003d28 <_reclaim_reent+0x8c>
 8003d22:	4620      	mov	r0, r4
 8003d24:	f000 f844 	bl	8003db0 <_free_r>
 8003d28:	6a23      	ldr	r3, [r4, #32]
 8003d2a:	b14b      	cbz	r3, 8003d40 <_reclaim_reent+0xa4>
 8003d2c:	4620      	mov	r0, r4
 8003d2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003d32:	4718      	bx	r3
 8003d34:	680e      	ldr	r6, [r1, #0]
 8003d36:	4620      	mov	r0, r4
 8003d38:	f000 f83a 	bl	8003db0 <_free_r>
 8003d3c:	4631      	mov	r1, r6
 8003d3e:	e7bb      	b.n	8003cb8 <_reclaim_reent+0x1c>
 8003d40:	bd70      	pop	{r4, r5, r6, pc}
 8003d42:	bf00      	nop
 8003d44:	20000014 	.word	0x20000014

08003d48 <__libc_init_array>:
 8003d48:	b570      	push	{r4, r5, r6, lr}
 8003d4a:	2600      	movs	r6, #0
 8003d4c:	4d0c      	ldr	r5, [pc, #48]	@ (8003d80 <__libc_init_array+0x38>)
 8003d4e:	4c0d      	ldr	r4, [pc, #52]	@ (8003d84 <__libc_init_array+0x3c>)
 8003d50:	1b64      	subs	r4, r4, r5
 8003d52:	10a4      	asrs	r4, r4, #2
 8003d54:	42a6      	cmp	r6, r4
 8003d56:	d109      	bne.n	8003d6c <__libc_init_array+0x24>
 8003d58:	f000 f87e 	bl	8003e58 <_init>
 8003d5c:	2600      	movs	r6, #0
 8003d5e:	4d0a      	ldr	r5, [pc, #40]	@ (8003d88 <__libc_init_array+0x40>)
 8003d60:	4c0a      	ldr	r4, [pc, #40]	@ (8003d8c <__libc_init_array+0x44>)
 8003d62:	1b64      	subs	r4, r4, r5
 8003d64:	10a4      	asrs	r4, r4, #2
 8003d66:	42a6      	cmp	r6, r4
 8003d68:	d105      	bne.n	8003d76 <__libc_init_array+0x2e>
 8003d6a:	bd70      	pop	{r4, r5, r6, pc}
 8003d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d70:	4798      	blx	r3
 8003d72:	3601      	adds	r6, #1
 8003d74:	e7ee      	b.n	8003d54 <__libc_init_array+0xc>
 8003d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d7a:	4798      	blx	r3
 8003d7c:	3601      	adds	r6, #1
 8003d7e:	e7f2      	b.n	8003d66 <__libc_init_array+0x1e>
 8003d80:	08003f40 	.word	0x08003f40
 8003d84:	08003f40 	.word	0x08003f40
 8003d88:	08003f40 	.word	0x08003f40
 8003d8c:	08003f44 	.word	0x08003f44

08003d90 <__retarget_lock_acquire_recursive>:
 8003d90:	4770      	bx	lr

08003d92 <__retarget_lock_release_recursive>:
 8003d92:	4770      	bx	lr

08003d94 <memcpy>:
 8003d94:	440a      	add	r2, r1
 8003d96:	4291      	cmp	r1, r2
 8003d98:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d9c:	d100      	bne.n	8003da0 <memcpy+0xc>
 8003d9e:	4770      	bx	lr
 8003da0:	b510      	push	{r4, lr}
 8003da2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003da6:	4291      	cmp	r1, r2
 8003da8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003dac:	d1f9      	bne.n	8003da2 <memcpy+0xe>
 8003dae:	bd10      	pop	{r4, pc}

08003db0 <_free_r>:
 8003db0:	b538      	push	{r3, r4, r5, lr}
 8003db2:	4605      	mov	r5, r0
 8003db4:	2900      	cmp	r1, #0
 8003db6:	d040      	beq.n	8003e3a <_free_r+0x8a>
 8003db8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dbc:	1f0c      	subs	r4, r1, #4
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	bfb8      	it	lt
 8003dc2:	18e4      	addlt	r4, r4, r3
 8003dc4:	f000 f83c 	bl	8003e40 <__malloc_lock>
 8003dc8:	4a1c      	ldr	r2, [pc, #112]	@ (8003e3c <_free_r+0x8c>)
 8003dca:	6813      	ldr	r3, [r2, #0]
 8003dcc:	b933      	cbnz	r3, 8003ddc <_free_r+0x2c>
 8003dce:	6063      	str	r3, [r4, #4]
 8003dd0:	6014      	str	r4, [r2, #0]
 8003dd2:	4628      	mov	r0, r5
 8003dd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003dd8:	f000 b838 	b.w	8003e4c <__malloc_unlock>
 8003ddc:	42a3      	cmp	r3, r4
 8003dde:	d908      	bls.n	8003df2 <_free_r+0x42>
 8003de0:	6820      	ldr	r0, [r4, #0]
 8003de2:	1821      	adds	r1, r4, r0
 8003de4:	428b      	cmp	r3, r1
 8003de6:	bf01      	itttt	eq
 8003de8:	6819      	ldreq	r1, [r3, #0]
 8003dea:	685b      	ldreq	r3, [r3, #4]
 8003dec:	1809      	addeq	r1, r1, r0
 8003dee:	6021      	streq	r1, [r4, #0]
 8003df0:	e7ed      	b.n	8003dce <_free_r+0x1e>
 8003df2:	461a      	mov	r2, r3
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	b10b      	cbz	r3, 8003dfc <_free_r+0x4c>
 8003df8:	42a3      	cmp	r3, r4
 8003dfa:	d9fa      	bls.n	8003df2 <_free_r+0x42>
 8003dfc:	6811      	ldr	r1, [r2, #0]
 8003dfe:	1850      	adds	r0, r2, r1
 8003e00:	42a0      	cmp	r0, r4
 8003e02:	d10b      	bne.n	8003e1c <_free_r+0x6c>
 8003e04:	6820      	ldr	r0, [r4, #0]
 8003e06:	4401      	add	r1, r0
 8003e08:	1850      	adds	r0, r2, r1
 8003e0a:	4283      	cmp	r3, r0
 8003e0c:	6011      	str	r1, [r2, #0]
 8003e0e:	d1e0      	bne.n	8003dd2 <_free_r+0x22>
 8003e10:	6818      	ldr	r0, [r3, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	4408      	add	r0, r1
 8003e16:	6010      	str	r0, [r2, #0]
 8003e18:	6053      	str	r3, [r2, #4]
 8003e1a:	e7da      	b.n	8003dd2 <_free_r+0x22>
 8003e1c:	d902      	bls.n	8003e24 <_free_r+0x74>
 8003e1e:	230c      	movs	r3, #12
 8003e20:	602b      	str	r3, [r5, #0]
 8003e22:	e7d6      	b.n	8003dd2 <_free_r+0x22>
 8003e24:	6820      	ldr	r0, [r4, #0]
 8003e26:	1821      	adds	r1, r4, r0
 8003e28:	428b      	cmp	r3, r1
 8003e2a:	bf01      	itttt	eq
 8003e2c:	6819      	ldreq	r1, [r3, #0]
 8003e2e:	685b      	ldreq	r3, [r3, #4]
 8003e30:	1809      	addeq	r1, r1, r0
 8003e32:	6021      	streq	r1, [r4, #0]
 8003e34:	6063      	str	r3, [r4, #4]
 8003e36:	6054      	str	r4, [r2, #4]
 8003e38:	e7cb      	b.n	8003dd2 <_free_r+0x22>
 8003e3a:	bd38      	pop	{r3, r4, r5, pc}
 8003e3c:	20001bac 	.word	0x20001bac

08003e40 <__malloc_lock>:
 8003e40:	4801      	ldr	r0, [pc, #4]	@ (8003e48 <__malloc_lock+0x8>)
 8003e42:	f7ff bfa5 	b.w	8003d90 <__retarget_lock_acquire_recursive>
 8003e46:	bf00      	nop
 8003e48:	20001ba8 	.word	0x20001ba8

08003e4c <__malloc_unlock>:
 8003e4c:	4801      	ldr	r0, [pc, #4]	@ (8003e54 <__malloc_unlock+0x8>)
 8003e4e:	f7ff bfa0 	b.w	8003d92 <__retarget_lock_release_recursive>
 8003e52:	bf00      	nop
 8003e54:	20001ba8 	.word	0x20001ba8

08003e58 <_init>:
 8003e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e5a:	bf00      	nop
 8003e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e5e:	bc08      	pop	{r3}
 8003e60:	469e      	mov	lr, r3
 8003e62:	4770      	bx	lr

08003e64 <_fini>:
 8003e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e66:	bf00      	nop
 8003e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e6a:	bc08      	pop	{r3}
 8003e6c:	469e      	mov	lr, r3
 8003e6e:	4770      	bx	lr
